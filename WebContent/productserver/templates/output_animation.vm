<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<HTML>

<HEAD>

<style type="text/css">
  input{
    color:#000000;
    font-size:100%;
  }
  
  select{
    color:#000000;
    font-size:100%;
 }

 p {font-size: 100%}

 .stop 
 {
   color:#ff0000;
   font-family:'trebuchet ms',helvetica,sans-serif;
   font-size: 110%;
   font-weight:bold;
 } 

 .play{
   color:#00ff00;
   font-family:'trebuchet ms',helvetica,sans-serif;
   font-size:110%;
   font-weight:bold;
 }
</style>

<TITLE>LAS Animation</TITLE>

<script language="JavaScript" src="JavaScript/components/xmldom.js"></script>
<script language="JavaScript" src="JavaScript/components/LASRequest.js"></script>
<script language="JavaScript" src="JavaScript/components/LASResponse.js"></script>
<script language="JavaScript" src="JavaScript/components/LASGrid.js"></script>
<script language="JavaScript" src="JavaScript/components/DateWidget.js"></script>
<script language="JavaScript" src="JavaScript/components/MenuWidget.js"></script>
<script language="JavaScript" src="JavaScript/components/sarissa.js"></script>
<script language="JavaScript" src="JavaScript/components/json.js"></script>
<script language="JavaScript" src="JavaScript/components/LASAnimationDOM.js"></script>

<SCRIPT language="javascript">

//=== get dataset grid
#set($dsID = $las_request.datasetIDs.get(0)) 
#set($varID = $las_request.variableIDs.get(0)) 
#set($grid = $las_config.getGrid($dsID,$varID)) 
#set($grid_JSON = $grid.toJSON().toString()) 
var gridJSON = '$grid_JSON'; 
//parse the gridJSON object 
var Grid; 
var JSONObject; 
try{ 
    var JSONObject = gridJSON.parseJSON(); 
}catch(e){ 
    alert('Error parsing gridJSON as JSON.'); 
} 
try{ 
    Grid = new LASGrid(JSONObject); 
}catch(e){ 
    alert(e); 
} 

//=== get variable IDs and names for the dataset
#set($variables = $las_config.getVariables($dsID))
#set($varNums = $variables.size())
var varIDs    = new Array();
var varNames  = new Array();
var numVars    = "$varNums";
//velocityCount start from 1
#foreach($v in $variables)
    varIDs[$velocityCount] = "$v.ID";
    varNames[$velocityCount] = "$v.Name";
#end

//=== XML returned from LAS for animation
animation_xml = "$las_response.getResultAsJavaScriptSafeString("ferret_listing")";
las_animation = new LASAnimation(animation_xml);
var xmlURL = "$las_response.getResult("ferret_listing")";

//===============================================//
//            Global variables                   //
//===============================================//
var initReq_xml = "$las_request.toJavaScriptSafeString()"; //initial LAS request
var initReq = new LASRequest(initReq_xml);
var initView = initReq.getProperty('ferret','view');
var initStep = initReq.getProperty('ferret','time_step');//initial time step 
var dsId   = "$dsID";                              //initial dataset ID
var varId  = "$varID";                             //initial variable ID
var tLo    = Grid.getLo('t');                      //low end of time grid
var tHi    = Grid.getHi('t');                      //high end of time grid
var tUnits = Grid.getUnits('t');                   //units of time grid
var tRenderFmt= Grid.getRenderFormat('t');

var DW;                                            //date widget
 
//=== variables for initializing animation
var xmlDoc; // the xml doc that contains individual time frames and color scales
var theTimes = new Array(); 
var fillLevels;
var contourLevels;
var depAxisScale;
var hasT;
var timeInterval; //animation time interval

//=== variables for animation controls
var hasError;                       // has LAS error
var lasMessage;                     // message in LAS response
var debugURL;                       // debug URL of LAS
var speed;                          // animation speed (frames/second)
var speed_max;                      // max. animation speed
var speed_min;                      // min. animation speed
var delay;                          // delay between frames in 1/1000 seconds, i.e. milliseconds
var theImages    = new Array();     // container for LAS plots
var imagesLoaded = new Array();     // flags for checking if a image is loaded
var firstTimeLoad= new Array();     // flags for checking if it's first time to load the image
var current_image;                  // index of current image
var timeID;                         // ID for timeOut
var animation_status;               // 0-stopped, 1-playing
var play_mode;                      // 0-play once, 1-loop
var loading;                        // 0-not loading, 1-loading
var start_image;                    // image number when delT was changed
var delT;                           // time inetrval
var first_image;
var last_image;

var ready;

//================================================//
//         functions for the submit button        //
//================================================//

/*
 * function for the submit button
 */
function doSubmit(){
    ready=false;
    hideLoading();
    animationDisableButtons();
    stop();//stop animation in case it's running

    if(validateTimeInterval()){
        //show the waiting icon
        document.getElementById("wait").style.visibility="";
    
        //turn off animation editor
        doCancel();

        var theReq = updateLASRequest();
        makeAnimationFramesRequest(theReq);
        setTimeout("startAnimation();", 300);
    }else{
        alert("Please enter a positive integer for time step.");
    }    
}

function validateTimeInterval(){
    ti = document.getElementById('timeStep').value;
    if(isNaN(ti)){ 
        return false;
    }else if(ti==""){
        //if(initStep != null){
        //    timeInterval = initStep;
        //}else{
        timeInterval = 1;
        //}
        return true;
    }else{
        timeInterval = ti;
        return true;
    }
}

/*
 * turn off animation editor and show image controls
 */
function doCancel(){
    var animationEditor = document.getElementById("animate_editor");
    animationEditor.style.display="none";
    animationEditor.innerHTML ="";
    showImagesControls();    
}

function showImagesControls(){
    var imagesControls = document.getElementById("images_controls");
    //imagesControls.setAttribute('style','position:relative;z-index:1;');
    //imagesControls.setAttribute('style','position:relative;text-align:center;');
    imagesControls.style.filter='alpha(Opacity=100);';
    imagesControls.style.opacity='1.0';
    
}

function doAnimation(){
    makeAnimationFramesRequest();
}

function startAnimation(){
    if(ready){
        document.getElementById("wait").style.visibility="hidden";
        showLoading();
        animation_start();
    }else{
        setTimeout("startAnimation();", 500);
    }
}

/*
 * update the initial LAS UI request
 */
function updateLASRequest(){

    var req = new LASRequest(initReq_xml);
    var theView = req.getProperty('ferret','view');
    req.setProperty('ferret','time_step',timeInterval);

    //set time to user selected range 
    req.setRange('t', DW.getDate1_Ferret(), DW.getDate2_Ferret());
    //initReq.setRange('t', DW.getDate1_Ferret());
    if(theView == 'xy' || theView == 'yx' || theView == 'xyt' || theView == 'yxt'){
        req.setProperty('ferret', 'view', 'xyt');
    }else if(theView == 'xz' || theView == 'zx' || theView == 'xzt' || theView == 'zxt'){
        req.setProperty('ferret', 'view', 'xzt');
    }else if(theView == 'yz' || theView == 'zy' || theView == 'yzt' || theView == 'zyt'){
        req.setProperty('ferret', 'view', 'yzt');
    }else if(theView == 'x' || theView == 'xt' || theView == 'tx'){
        req.setProperty('ferret', 'view', 'xt');
    }else if(theView == 'y' || theView == 'yt' || theView == 'ty'){
        req.setProperty('ferret', 'view', 'yt');
    }else if(theView == 'z' || theView == 'zt' || theView == 'tz'){
        req.setProperty('ferret', 'view', 'zt');
    }

    req.setOperation('Animation_Frames_XY');

    //req.setVariable(dsId, varId);//not working
    req.replaceVariable(dsId,varId);
    return req;
}

/*
 * compute color scale and extract time frames for the selected time range
 */
function makeAnimationFramesRequest(theReq){
    theReq.setProperty('las','output_type','json');
    var prefix = 'ProductServer.do?xml=';
    var url = prefix+escape(theReq.getXMLText());

    var xmlhttp = new XMLHttpRequest();

    //wait for response
    xmlhttp.open('GET', url, true);
    xmlhttp.onreadystatechange = function(){
        if(xmlhttp.readyState == 4){
            handleAnimationFramesResponse(xmlhttp.responseText);
        }
    }
    xmlhttp.send(null);
}

/*
 * handle the response for computing color scale and time frames 
 * for the selected time range
 */
function handleAnimationFramesResponse(LASResponseText){
    //parse the LASResponse
    var Response;
   
    try{
        var JSONObject = LASResponseText.parseJSON();
        
    }catch(e){
        alert('Error parsing LASRespnse:' + e);
        return;
    }

    try{
        Response = new LASResponse(JSONObject);
    }catch(e){
        alert(e);
        alert("error");
        return;
    }

    if(Response.isError()){
        showError(Response);    
    }else{
        var listing = Response.getResult("ferret_listing");
        importXML(listing.url);
        ready = true;
        animationInit();
    }
}

/*
 * load the xml file 
 */
function importXML(xml)
{
    //for Firfox etc.
    if (document.implementation && document.implementation.createDocument){
	xmlDoc = document.implementation.createDocument("", "", null);	
    //for IE
    }else if(window.ActiveXObject){
	xmlDoc = new ActiveXObject("Microsoft.XMLDOM");	
    }else{
	alert('Your browser can\'t handle this script');
	return;
    }
    xmlDoc.async=false;
    xmlDoc.load(xml);
}

/*
 * initialize variables for animation
 */
function animationInit(){
    fillLevels    = xmlDoc.getElementsByTagName("fill_levels")[0].childNodes[0].nodeValue;
    contourLevels = xmlDoc.getElementsByTagName("contour_levels")[0].childNodes[0].nodeValue;
    depAxisScale  = xmlDoc.getElementsByTagName("dep_axis_scale")[0].childNodes[0].nodeValue;
    hasT          = xmlDoc.getElementsByTagName("hasT")[0].childNodes[0].nodeValue;
    //units          = xmlDoc.getElementsByTagName("units")[0].childNodes[0].nodeValue;

    var n = xmlDoc.getElementsByTagName("frame").length;
    for(i=0;i<n;i++){
        theTimes[i] = xmlDoc.getElementsByTagName("frame")[i].childNodes[0].nodeValue;
    }

    first_image = 0;
    last_image  = n-1;

    hasError = 0;

    for (var i = first_image; i <= last_image; i++){
        firstTimeLoad[i] = 1;
        imagesLoaded[i]=0;
    }

    //unit of speed is frames per second
    speed         = 8;
    speed_max     = 128;
    speed_min     = 1;
    delay         = 1000/speed;
    delT          = 1;
    current_image = first_image;
    timeID        = null;
    animation_status = 0;
    play_mode     = 1;
    loading       = 1;
    start_image   = 0;

    //make sure the first image number is not bigger than the last image number
    if (first_image > last_image)
    {
        var help = last_image;
        last_image = first_image;
        first_image = help;
    };
}

/*
 * start animation
 */
function animation_start(){

    //load the first image
    animate_loadNextImages(0,0);

    //no error in making LAS request
    if(hasError == 0){

        //turn on play mode
        animation_status = 1;
        current_image = first_image;

        document.animation.src = theImages[current_image].src;

        //document.control_form.frame_nr.value = current_image+1;
        change_mode(document.control_form.play_mode_selection.selectedIndex);
    }
}


/*
 * show error messsage and link to debug file
 */
function showError(Response){
    var lasMessage = Response.getResult('las_message').content;
    var debugURL = Response.getDebugURL();
    var node = document.getElementById("lasResponse");

    //remove old content
    children = node.childNodes;
    num_children = children.length;
    for(var i=num_children-1;i>=0;i--){
        var child = children[i];
        if(child){
            node.removeChild(child);
        }
    }

    //show the error message
    var CC_div = document.createElement('div');
    CC_div.setAttribute('class','CCell_las_message');
    node.appendChild(CC_div);
    var textNode = document.createTextNode(lasMessage);
    CC_div.appendChild(textNode);

    //show the debug URL
    CC_div = document.createElement('div');
    CC_div.setAttribute('class','CCell_error_link');
    node.appendChild(CC_div);
    var error_link = document.createElement('a');
    error_link.href = debugURL;
    textNode = document.createTextNode('More details about this error.');
    //CC_div.setAttribute('style', 'font-size:16px;');
    error_link.appendChild(textNode);
    CC_div.appendChild(error_link);
}

//==================================================//
//       functions for variable selection           //
//==================================================//

/*
 * get the variables of a dataset -----not useful
 */
function getVariables(){
    //initReq.setProperty('las','output_type','json');
    var prefix = 'getVariables.do?';
    var url = prefix+'dsid='+dsId;

    var xmlhttp = new XMLHttpRequest();
    //wait for response
    xmlhttp.open('GET', url, false);
    xmlhttp.onreadystatechange = function(){
        if(xmlhttp.readyState == 4){
            handleGetVariablesResponse(xmlhttp.responseText);
        }
    }
    xmlhttp.send(null);
}

/* 
 * handle the reponse for getVariables.do ----not useful
 */
function handleGetVariablesResponse(LASResponseText){    
    var JSONObject = LASResponseText.parseJSON();    
    numVars = JSONObject.variables.variable.length;    
    for(i=0;i<numVars;i++){
        varIDs[i]= JSONObject.variables.variable[i].ID;
        varNames[i]= JSONObject.variables.variable[i].name;
    }
    showVariables();
}

/*
 * populate the variable selection menu
 */
function showVariables(){
     varsHTML  = "";
     varsHTML += "<label for=\"vars\">&nbsp;<b>Select Variable:</b> </label><br>";
     varsHTML += "&nbsp;<select name=\"vars\" onChange=\"updateVariable(this)\" id=\"variables\">";
     for(i=1;i<=numVars;i++){
         //alert(varNames[i]);
         varsHTML += "<option value=\" "+i+"\">"+varNames[i]+"</option>";
         //varsHTML += "<option value=\" "+i+"\">"+varIDs[i]+"</option>";
     }
     varsHTML += "</select>";
     document.getElementById("SelectVariable").innerHTML = varsHTML;
}

/*
 * update variable ID, varId
 */
function updateVariable(theSelect){
    theIndex = theSelect.selectedIndex+1;
    //varName = theSelect.options[theIndex].value;
/*
    for(i=0;i<numVars;i++){
        alert(varNames[i]);
        if(varName == varNames[i]){
            break;
        }
    }
*/
    varId = varIDs[theIndex];
}

//======================================================//
//       function for disable/enable buttons            //
//======================================================//

/*
 * enable the control buttons
 */
function animationEnableButtons(){
    document.control_form.play_mode_selection.disabled = false;
    document.control_form.first_img_button.disabled    = false;
    document.control_form.prev_img_button.disabled     = false;
    document.control_form.stop_button.disabled         = false;
    document.control_form.play_button.disabled         = false;
    document.control_form.next_img_button.disabled     = false;
    document.control_form.last_img_button.disabled     = false;
    document.control_form.decre_speed.disabled         = false;
    document.control_form.incre_speed.disabled         = false;
    //document.control_form.decre_delT.disabled          = false;
    //document.control_form.incre_delT.disabled          = false;
}

/*
 * disable the control buttons
 */
function animationDisableButtons(){
    document.control_form.play_mode_selection.disabled = true;
    document.control_form.first_img_button.disabled    = true;
    document.control_form.prev_img_button.disabled     = true;
    document.control_form.stop_button.disabled         = true;
    document.control_form.play_button.disabled         = true;
    document.control_form.next_img_button.disabled     = true;
    document.control_form.last_img_button.disabled     = true;
    document.control_form.decre_speed.disabled         = true;
    document.control_form.incre_speed.disabled         = true;
    //document.control_form.decre_delT.disabled          = true;
    //document.control_form.incre_delT.disabled          = true;
}

//=====================================================//
//       functions for making invidual LAS plots
//=====================================================//

/* 
 * load the next image 
 */
function animate_loadNextImage(currentImg){
  if(loading == 1){
      //start animation after loading all images
      if(currentImg == last_image){
          loading = 0;
          //document.ani_form.halt_loading.disabled=true;
          hideLoading();
          animationEnableButtons();
          animate_fwd();
      }else{
          animate_loadNextImages(currentImg+1,currentImg+1);
          go2next(currentImg+1);
      }
  }
}
/*
 * load next images from startImg to endImg using AJAX call
 */
function animate_loadNextImages(startImg, endImg){

     //make sure the index is less than the last_image
    if(startImg >= last_image){
        startImg = last_image;
    }

    if(endImg >= last_image){
        endImg = last_image;
    }

    for (var i = startImg; i <= endImg; i++){
        if(imagesLoaded[i] != 1){
            //theImages[i] = new Image();
            var thisReq = animate_makeFirstLASRequest(theTimes[i]);
            var lasReq;
            if(i==0){
                //lasReq = animate_makeFirstLASRequest(theTimes[i]);
                lasReq = thisReq;
            }else{
                //lasReq = animate_makeLASRequest(theTimes[i]);
                lasReq = animate_makeLASRequest(thisReq,theTimes[i]);
            }
            sendLASRequest(lasReq,i);
        }
    }
}

/*
 * send request for making a LAS plot
 * @lasReq the LAS request
 * @i      the index of the image frame
 */
function sendLASRequest(lasReq,i){
    lasReq.setProperty('las','output_type','json');
    var prefix = lasReq.prefix;
    var url = prefix+escape(lasReq.getXMLText());

    var xmlhttp = new XMLHttpRequest();

    //wait for response
    xmlhttp.open('GET', url, false);
    xmlhttp.onreadystatechange = function(){
        if(xmlhttp.readyState == 4){
            handleLASResponse(xmlhttp.responseText,i);
        }
    }

    xmlhttp.send(null);
}

/*
 * precess the LASResponse
 */
function handleLASResponse(LASResponseText, i){

    //parse the LASResponse
    var Response;
    try{
        var JSONObject = LASResponseText.parseJSON();
    }catch(e){
        alert('Error parsing LASRespnse:' + e);
        return;
    }

    try{
        Response = new LASResponse(JSONObject);
    }catch(e){
        alert(e);
        return;
    }

    if(Response.isError()){
        hasError = 1;
        showError(Response);
    }else{
        //showPlot(Response,i);
        var imgURL = Response.getImageURL();
        theImages[i] = new Image();
        theImages[i].src =  imgURL;
        imagesLoaded[i] = 1;
        document.control_form.frame_nr.value=i+1;
        //document.ani_form.loading_nr.value=i+1;
        //document.getElementById("loading_nr").value=i+1;
    }
}

/*
 * make LAS request for the first frame
 */
function animate_makeFirstLASRequest(timePoint) {

    //check the type of view and change view for the new request
    var initView = initReq.getProperty('ferret','view');

    var thisReq = initReq;

    thisReq.replaceVariable(dsId,varId);

    //get the fill_levels computed from the whole domain (e.g. xyt range)
    //var fillLevels = las_animation.getFillLevels();
    //var contourLevels = las_animation.getContourLevels();
    //var depAxisScale = las_animation.getDepAxisScale();

    //for XY view
    if(initView == 'xy' || initView == 'yx'){
        thisReq.setOperation('Plot_2D_XY');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //for XZ view
    if(initView == 'xz' || initView == 'zx'){
        thisReq.setOperation('Plot_2D');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //for YZ view
    if(initView == 'yz' || initView == 'zy'){
        thisReq.setOperation('Plot_2D');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //for XT view
    if(initView == 'xt' || initView == 'tx'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','x');
        if(depAxisScale != null){
            thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for YT view
    if(initView == 'yt' || initView == 'ty'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','y');
        if(depAxisScale != null){
            thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for ZT view
    if(initView == 'zt' || initView == 'tz'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','z');
        if(depAxisScale != null){
            thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for X view
    if(initView == 'x'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','x');
        if(depAxisScale != null){
            thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for Y view
    if(initView == 'y'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','y');
        if(depAxisScale != null){
            thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for Z view
    if(initView == 'z'){
        thisReq.setOperation('Plot_1D');
        thisReq.setProperty('ferret','view','z');
        if(depAxisScale != null){
           thisReq.setProperty('ferret','dep_axis_scale', depAxisScale);
        };
    };

    //for XYT view
    if(initView == 'xyt' || initView == 'yxt'){
        thisReq.setOperation('Plot_2D_XY');
        thisReq.setProperty('ferret','view','xy');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //for XZT view
    if(initView == 'xzt' || initView == 'zxt'){
        thisReq.setOperation('Plot_2D');
        thisReq.setProperty('ferret','view','xz');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //for YZT view
    if(initView == 'yzt' || initView == 'zyt'){
        thisReq.setOperation('Plot_2D');
        thisReq.setProperty('ferret','view','yz');
        if(fillLevels != null){
            thisReq.setProperty('ferret','fill_levels', fillLevels);
        };
        if(contourLevels != null){
            thisReq.setProperty('ferret','contour_levels', contourLevels);
        };
    };

    //change the time from range to point
    thisReq.setRange('t',timePoint);
    thisReq.prefix='ProductServer.do?xml=';

    return thisReq;
}

/* 
 * make LAS request for frames starting from 2nd frame
 */
function animate_makeLASRequest(theReq,timePoint) {
    theReq.setRange('t',timePoint);
    return theReq;
}

//=================================================//
//     Functions for controling animation          //
//=================================================//

//===> displays image depending on the play mode in forward direction
function animate_fwd()
{
    //current_image++;
    current_image = current_image + delT;

    if(current_image > last_image)
    {
        if (play_mode == 0)
        {
            current_image = last_image;
            animation_status=0;
            return;
        };                           //NORMAL
        if (play_mode == 1)
        {
            //current_image = first_image; //LOOP
            //current_image = current_image%(last_image+1);
            current_image = compute_first();
        };
    };

    document.animation.src = theImages[current_image].src;
    document.control_form.frame_nr.value = current_image+1;
    timeID = setTimeout("animate_fwd()", delay);
}

//===> changes playing speed by doubling or halfing the current speed
function change_speed(dv)
{
    if(dv == 1 ) speed = speed*2;
    if(dv == -1) speed = speed/2;

    if(speed > speed_max) speed = speed_max;
    if(speed < speed_min) speed = speed_min;

    delay = 1000/speed;
    document.control_form.speed_nr.value = speed;
}

//===> changes time step by decreasing or increasing by 1
function change_delT(dv)
{
    if(dv == 1 ) delT++;
    if(dv == -1) delT--;

    if(delT<1) delT=1;
    if(delT>=last_image) delT=last_image;

    //document.control_form.delT_nr.value = delT;
    start_image = current_image;
}

//===> compute first image
function compute_first(){
    if(delT == 1){
        return 0;
    }else{
        while(start_image>=0){
            start_image = start_image - delT;
        }
        return start_image+delT;
    }
}

//===> stop the animation
function stop()
{
    if(loading == 0){
        if (animation_status == 1) clearTimeout(timeID);
        animation_status = 0;
    }
}

//===> play forward
function fwd()
{
    stop();
    animation_status = 1;
    animate_fwd();
}

//===> go to the next image without turning off play mode
function go2next(number)
{
    if (number > last_image) number = last_image;
    if (number < first_image) number = first_image;
    current_image = number;
    document.animation.src = theImages[current_image].src;
    //document.control_form.frame_nr.value = current_image+1;
}

//===> jumps to an image with the given number
function go2image(number)
{
    //only when it's not loading, jump to the image
    if(loading == 0){
        stop();
        if (number > last_image) number = last_image;
        if (number < first_image) number = first_image;
        current_image = number;
        document.animation.src = theImages[current_image].src;
        document.control_form.frame_nr.value = current_image+1;
        start_image = current_image;
    }
}

/*
 * changes play mode (normal, loop, swing)
 */
function change_mode(mode)
{
   play_mode = mode;
}

//====================================================//
//    functions for showing/hiding downloading        //
//====================================================//

/*
 * stop loading LAS plots and start animation
 */
function haltLoading(){
    loading = 0;
    last_image = getLastImgIndex();
    //document.ani_form.halt_loading.disabled=true;
    hideLoading();
    animationEnableButtons();
    animate_fwd();
}

/*
 * find the index of the last loaded image
 */
function getLastImgIndex(){
    for(i=0;i<last_image;i++){
        if(imagesLoaded[i] == 0){
            break;
        }
    }
    return i-1;
}

/*
 * show the stop download button
 */
function showLoading(){
    //downloadingHTML  = "Download <input type=\"text\" name=\"loading_nr\" value=\"0\" size=\"3\"> frames<br>";
/*
    downloadingHTML = "<input type=\"button\" name=\"halt_loading\" value=\"Stop Download\" onClick=\"haltLoading()\" >";
    downloadingHTML += " Download <input type=\"text\" name=\"loading_nr\" value=\"0\" > frames";
    document.getElementById("downloading").innerHTML = downloadingHTML;
*/
    stopLoadingHTML = "<input type=\"button\" name=\"halt_loading\" value=\"Stop Download\" onClick=\"haltLoading()\" >";
    document.getElementById("stopLoading").innerHTML = stopLoadingHTML;

    //loadingNumHTML = " Download <input type=\"text\" id=\"loading_nr\" value=\"0\" size=\"4\" > frames";
    //document.getElementById("loadingNum").innerHTML = loadingNumHTML;
}

/*
 * hide the stop download button
 */
function hideLoading(){
    //document.getElementById("downloading").innerHTML = "";
    document.getElementById("stopLoading").innerHTML = "";
    document.getElementById("loadingNum").innerHTML = "";
}

//=====================================================//
// function for creating and launching the animation UI 
//=====================================================//
/*
 * sets everything once the whole page and the images are loaded (onLoad handler in <body>)
 */
function launch() 
{
    animationDisableButtons();    //disable the animation control buttons
    importXML(xmlURL);            //load the xml file of time frames
    animationInit();              //init animation
    var plotReq =  animate_makeFirstLASRequest(theTimes[0]);
    showLoading();                //show 'Stop Download' button 
    sendLASRequest(plotReq,0);    //send the request

    if(hasError == 0){
        animation_status = 1;     //turn on play mode
        current_image = first_image;
        document.animation.src = theImages[0].src;    //display the plot
        change_mode(document.control_form.play_mode_selection.selectedIndex);
    }
}

/*
 * generate date widget for the animation editor
 */
function genDateWidget(){
    DW = new DateWidget(tLo, tHi);
    if(tRenderFmt == '' && tUnits == "month"){
        DW.render('DateWidgetRange', 'M', 'M');
    }else{
        DW.render('DateWidgetRange', tRenderFmt, tRenderFmt);
    }
/*
    menu = Grid.getMenu('t');
    MW = new MenuWidget(menu);
    MW.render('DateWidgetStart');
*/
}

/*
 * pop up editor for creating a new animation
 */
function doEdit(){
    var animationEditor = document.getElementById("animate_editor");
    var imagesControls  = document.getElementById("images_controls");

    //animationEditor.setAttribute('style','position:relative;top:-500;left:250;width:500px;background-color:#CCCCCC;color:red;z-index:2;');
    //animationEditor.setAttribute('style','position:absolute;top:100px;left:100px;width:500px;background-color:#CCCCCC;z-index:6;');
    animationEditor.style.display='';
    //imagesControls.setAttribute('style','position:relative;z-index:1;filter:alpha(Opacity=50);-moz-opacity:.50;opacity:.50;');
    imagesControls.style.filter='alpha(Opacity=50);';
    //imagesControls.style.-moz-opacity='.50';
    imagesControls.style.opacity='.50';

    var editorContent = "&nbsp;<b>Select Time Range:</b>";
    editorContent += "<br><div id='DateWidgetRange' ></div><br>"; 
    //editorContent += "<br><div id='DateWidgetStart' ></div><br>";
    //editorContent += "<div id=\"SelectVariable\"></div><br>";
    if(initStep != null){
        editorContent += "&nbsp;<b>Time Step:&nbsp;</b><input type=\"text\" id=\"timeStep\" value=\""+initStep+"\" size=\"4\"> ("+tUnits +")<br>";
    }else{
        editorContent += "&nbsp;<b>Time Step:&nbsp;</b><input type=\"text\" id=\"timeStep\" size=\"4\"> ("+tUnits+")<br>";
    }

    //editorContent += "&nbsp;<FORM name=\"timeStep_form\"><input type=\"text\" id=\"timeStep\" size=\"4\"></FORM><br> ";
    editorContent += "<br><div id=\"SelectVariable\"></div><br>";
    editorContent += "&nbsp;<input type=\"button\" name=\"start_loading\" value=\"Submit\" size=\"6\" onClick=\"doSubmit()\">";
    editorContent += "&nbsp;<input type=\"button\" name=\"editor_cancel\" value=\"Cancel\" size=\"6\" onClick=\"doCancel()\">";

    animationEditor.innerHTML = editorContent;

    genDateWidget();
    //getVariables();
    showVariables();

    //reset varID to the 1st var
    varId = varIDs[1];
}

//===> writes the interface into the code where you want it
function genAnimationUI()
{
    //interface for animation
    document.write("<fieldset style=\"border:2px solid grey;\">");
    document.write(" <legend><FONT size=+3><b>LAS Animation</b></FONT></legend>");
    document.write("  <div>");
    document.write("   <table style=\"margin: 6px;\">");
    document.write("    <tr>");
    document.write("     <td>");
    document.write("      <input type=\"button\" name=\"editing\" value=\"New ...\" onClick=\"doEdit()\">");
    document.write("      <img id=\"wait\" style=\"visibility:hidden;\" src=\"JavaScript\/components\/mozilla_blu.gif\">");
    document.write("     </td>");
    document.write("     <td id=\"stopLoading\">");
    
    //document.write("      <form name=\"ani_form\" id=\"downloading\" >");
    //document.write("      </form>");
    document.write("     </td>");
    document.write("     <td id=\"loadingNum\">");
    document.write("     </td>")
    document.write("    </tr>");
    document.write("   </table>");
    document.write("  </div>");
    document.write("</fieldset>");
    document.write("<br>");

    //animation editor
    document.write("<div style=\"border:2pt solid black; border-color: #99cccc;position:absolute;top:150px;left:100px;display:none;width:500px;background-color:#CCCCCC;z-index:2;\" id=\"animate_editor\"></div>");

    //=== animation images and controls
    document.write("<div id=\"images_controls\" style=\"position:absolute;z-index:1;text-align:center;\">");

    //images
    //document.write("<table style=\"border:10px groove #3366FF;text-align:right;margin: 0 auto;\">");
    document.write("<table style=\"border:10px groove #3366FF;text-align:center;margin: 0 auto;\">");
    document.write(" <tr>");
    document.write("  <td id=\"lasResponse\">");
    document.write("   <IMG NAME=\"animation\" id=\"las_image\" onLoad=\"animate_loadNextImage(current_image)\" ALT=\"LAS Plot\">");
    document.write("  </td>");
    document.write(" </tr>");
    document.write("</table>");

    //controls       
    document.write("<br>");
    document.write("<div style=\"text-align:center;\" >");
    document.write(" <FORM  Method=POST Name=\"control_form\"> ");
    document.write(" <SELECT NAME=\"play_mode_selection\" onChange=\"change_mode(this.selectedIndex)\"> ");
    document.write(" <OPTION VALUE=0>play once ");
    document.write(" <OPTION SELECTED VALUE=1>loop ");
    document.write(" </SELECT> ");
    document.write("&nbsp; &nbsp; &nbsp; ");
    document.write(" <INPUT TYPE=\"button\" name=\"first_img_button\" Value=\" |< \" onClick=\"go2image(first_image)\"> ");
    document.write(" <INPUT TYPE=\"button\" name=\"prev_img_button\" Value=\" -1 \" onClick=\"go2image(--current_image)\"> ");
    document.write(" <INPUT  TYPE=\"button\" class=\"stop\" name=\"stop_button\" Value=\" STOP \" onClick=\"stop()\"> ");
    document.write(" <INPUT TYPE=\"button\" class=\"play\" name=\"play_button\" Value=\" PLAY \" onClick=\"fwd()\"> ");
    document.write(" <INPUT TYPE=\"button\" name=\"next_img_button\" Value=\" +1 \" onClick=\"go2image(++current_image)\"> ");
    document.write(" <INPUT TYPE=\"button\" name=\"last_img_button\" Value=\" >| \" onClick=\"go2image(last_image)\"> ");
    document.write("&nbsp; &nbsp; &nbsp; ");
    document.write(" <INPUT TYPE=\"text\" NAME=\"frame_nr\" VALUE=\"1\" SIZE=\"5\" ");
    document.write(" onFocus=\"this.select()\" onChange=\"go2image(this.value)\"> ");
    document.write(" <p>");
    document.write(" Speed <INPUT name=\"decre_speed\" TYPE=\"button\" Value=\" - \" onClick=\"change_speed(-1)\"> ");
    document.write(" <INPUT TYPE=\"text\" NAME=\"speed_nr\" VALUE=\"8\" SIZE=\"4\"> ");
    document.write(" <INPUT TYPE=\"button\" name=\"incre_speed\" Value=\" + \" onClick=\"change_speed(1)\"> ");
    //document.write("&nbsp; &nbsp;");
    //document.write(" Time Step <INPUT name=\"decre_delT\" TYPE=\"button\" Value=\" - \" onClick=\"change_delT(-1)\"> ");
    //document.write(" <INPUT TYPE=\"text\" NAME=\"delT_nr\" VALUE=\"1\" SIZE=\"4\"> ");
    //document.write(" <INPUT TYPE=\"button\" name=\"incre_delT\" Value=\" + \" onClick=\"change_delT(1)\"> ");
    document.write(" </FORM> ");
    document.write("</div>");
    document.write("</div>");
};

</SCRIPT>
</HEAD>

<BODY BGCOLOR="#FFFFFF" onLoad="launch()">
  <SCRIPT language="javascript">
    genAnimationUI();
  </SCRIPT>
</BODY>
</HTML>
