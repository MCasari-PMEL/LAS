


<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>LAS Output -- $las_config.getTitle()</title>

#set($use_ref_map=$las_request.getProperty("ferret", "use_ref_map"))
<script language="JavaScript" src="JavaScript/components/xmldom.js"></script>
<script language="JavaScript" src="JavaScript/components/LASRequest.js"></script>
<script type="text/javascript" src="JavaScript/frameworks/dojo/dojo.js"></script>
<SCRIPT language="JavaScript" src="JavaScript/components/MapWidget.js"></SCRIPT>




<STYLE type=text/css>
</STYLE>


<script language="JavaScript">


dojo.require("dojo.io.*");





var myMapWidget = {};  //put it in a global variable, or else you'll lose it.
var Req = {}; //Same goes for the LAS request object
var previousXRegionsLo = new Array();
var previousYRegionsLo = new Array();
var previousXRegionsHi = new Array();
var previousYRegionsHi = new Array();
var axisLow = "";
var axisHi = "";





////////////////////////////////////////////////////////////
//                                                        //
// Functions called from the HTML page                    //
//                                                        //
////////////////////////////////////////////////////////////

/*
*  run some javascript from request
*  params:
*     request -- the product server request string
*/
function evalMyRequest (request) {
              var bindArgs = {                           url: request,
                       mimetype: "text/plain",
                       preventCache:true,
                       error: function(type,error) {alert('Yo: ' +error.type + ' ' + error.message);},
                       load: function(type,data,event) {eval2(data);}
                };
               var request = dojo.io.bind(bindArgs);

}



/* 
*  load the initial XY image that was requested from LAS
*/
function loadMap (){
var zoomButton = document.getElementById('zoom_button');
if (zoomButton) {
   zoomButton.style["display"] = "none"
}
var args = {
                   'DOMNode' : document.getElementById('img_body'), // the container Node
                   'onafterdraw' : function () {submitXML()},      //a function to fire after drawing (talk to me about this one)
                   'plot_area' : {                              // defining the plot region within the image
                           'offX' : $las_map_scale.getXOffsetFromLeft(),
                           'offY' : $las_map_scale.getYOffsetFromTop(),
                           'width' : $las_map_scale.getXPlotSize(),
                           'height' : $las_map_scale.getYPlotSize()
                   },
                   'img' : {                                   //the image
                           'src' : "$las_response.getResult("plot_image")",
                           'width' : $las_map_scale.getXImageSize(),
                           'height' :$las_map_scale.getYImageSize(),
                           'extent' : {                                       //coordinate extent of the image being passed
                               'x' : {
                                   'min' : $las_map_scale.getXAxisLowerLeft(),
                                   'max' : $las_map_scale.getXAxisUpperRight()
                               },
                               'y' : {
                                   'min' : $las_map_scale.getYAxisLowerLeft(),
                                   'max' : $las_map_scale.getYAxisUpperRight()
                               }
                           }
                       }
                  };
myMapWidget = new MapWidget(args);
}



/* 
* now load up new image and prepare to send requests to LAS for more stuff
*/
function eval2(strJson) {
 //alert(strJson);
 eval(strJson);
 var args = {
                   'DOMNode' : document.getElementById('img_body'), // the container Node
                   'onafterdraw' : function () {submitXML()},      //a function to fire after drawing
                   'plot_area' : {                                                       // defining the plot region within the image
                           'offX' : newImage.offX,
                           'offY' : newImage.offY,
                           'width' : newImage.width,
                           'height' : newImage.height
                   },
                   'img' : {                                                                //the image
                           'src' : newImage.url,
                           'width' : newImage.wholeImageWidth,
                           'height' :newImage.wholeImageHeight,
                           'extent' : {                                                     //coordinate extent of the image being passed
                               'x' : {
                                   'min' : newImage.lowX,
                                   'max' : newImage.highX
                               },
                               'y' : {
                                   'min' : newImage.lowY,
                                   'max' : newImage.highY
                               }
                           }
                       }
                  };

 myMapWidget.destroy();
// document.getElementById('img_body').innerHTML = "";
 myMapWidget = {};
 myMapWidget = new MapWidget(args);

/*
* if this isn't the first plot, show the zoom out button
*/
 var zoomButton = document.getElementById('zoom_button');
 if (zoomButton) {
  if (previousXRegionsLo[0]) {
   zoomButton.style["display"] = "block"
   document.getElementById('zoomInfo').style["display"]="none";
  } else {
   zoomButton.style["display"] = "none"
   document.getElementById('zoomInfo').style["display"]="block";
 }
}

}


function initializeLASRequest() {
  Req = new LASRequest('$las_request.toJavaScriptSafeString()');

}

function submitXML() {

/*
* figure out what view this and use the axis values (ie x or y), to get the ranges.  Not 
* really needed for the XY zoom, but leave it in because we will need for other views
*/
    var view = Req.getProperty('ferret','view');
    axisLow = view.substr(0,1);
    axisHi = view.substr(1,1);
    if (myMapWidget.extents.selection.grid.x.min) {
     previousXRegionsLo.push(Req.getRangeLo(axisLow));
     previousXRegionsHi.push(Req.getRangeHi(axisLow));
     previousYRegionsLo.push(Req.getRangeLo(axisHi));
     previousYRegionsHi.push(Req.getRangeHi(axisHi));
     Req.setRange(axisLow,myMapWidget.extents.selection.grid.x.min,myMapWidget.extents.selection.grid.x.max);
     Req.setRange(axisHi,myMapWidget.extents.selection.grid.y.min,myMapWidget.extents.selection.grid.y.max);
    }
   
    Req.setOperation('XY_2D_zoom','LAS7');
    var URL = './ProductServer.do?xml=' + escape(Req.getXMLText());
    evalMyRequest(URL);

}

/*
* pop the previous regions of region stack and zoom back to that image
*/
function submitZoomOutXML() {

     Req.setRange(axisLow,previousXRegionsLo.pop(),previousXRegionsHi.pop());
     Req.setRange(axisHi,previousYRegionsLo.pop(),previousYRegionsHi.pop());
     Req.setOperation('XY_2D_zoom','LAS7');
     var URL = './ProductServer.do?xml=' + escape(Req.getXMLText());
     evalMyRequest(URL);

}


</script>
</head>

<body onload="initializeLASRequest(); loadMap()">


<table>
  <tr>
    <td> 
	<DIV id="img_body" name="img_body"></DIV>
    </td>
  </tr>
  <tr>
    <td>
	<div id="zoom_button" name="zoom_button">
	<input type="button" name"zoom" value="Zoom Back" onclick="submitZoomOutXML()">
	</div>	
    </td>
  </tr>
  <tr>
    <td>
	<div id="zoomInfo" name="zoomInfo">
	<font color="red" size="+1">Click and drag to Select a zoom region</font>
	</div>	
    </td>
  </tr>
 </table>


</body>
</html>

