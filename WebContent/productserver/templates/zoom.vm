<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>LAS Output -- $las_config.getTitle()</title>

		<style media="all" type="text/css">
			@import "JavaScript/ui/LASUI.css";
		</style>
</head>
<body onload="initializeLASRequest(); loadMap()">
  	<div id="img_body" name="img_body"></div>
</body>

<script language="JavaScript" src="JavaScript/components/xmldom.js"></script>
<script language="JavaScript" src="JavaScript/components/LASRequest.js"></script>
<SCRIPT language="JavaScript" src="JavaScript/components/MapWidget.js"></SCRIPT>
<script language="JavaScript">

var myMapWidget = {};  //put it in a global variable, or else you'll lose it.
var Req = {}; //Same goes for the LAS request object
var axisLow = "";
var axisHi = "";
/* 
*  load the initial XY image that was requested from LAS
*/
function loadMap (){
	var args = {
                   'DOMNode' : document.getElementById('img_body'), // the container Node
                   'onafterdraw' : function () {submitXML()},      //a function to fire after drawing (talk to me about this one)
                   'plot_area' : {                              // defining the plot region within the image
                           'offX' : $las_map_scale.getXOffsetFromLeft(),
                           'offY' : $las_map_scale.getYOffsetFromTop(),
                           'width' : $las_map_scale.getXPlotSize(),
                           'height' : $las_map_scale.getYPlotSize()
                   },
                   'img' : {                                   //the image
                           'src' : "$las_response.getResult("plot_image")",
                           'width' : $las_map_scale.getXImageSize(),
                           'height' :$las_map_scale.getYImageSize(),
                           'extent' : {                                       //coordinate extent of the image being passed
                               'x' : {
                                   'min' : $las_map_scale.getXAxisLowerLeft(),
                                   'max' : $las_map_scale.getXAxisUpperRight()
                               },
                               'y' : {
                                   'min' : $las_map_scale.getYAxisLowerLeft(),
                                   'max' : $las_map_scale.getYAxisUpperRight()
                               }
                           }
                       }
                  }

	if('$las_map_scale.getAxis_vertical_positive()'=='down') {
		args.img.extent.y.max = $las_map_scale.getYAxisLowerLeft();
		args.img.extent.y.min =  $las_map_scale.getYAxisUpperRight();
	}
	if('$las_map_scale.getAxis_horizontal_positive()'=='left') {
                args.img.extent.x.max = $las_map_scale.getXAxisLowerLeft();
                args.img.extent.x.min =  $las_map_scale.getXAxisUpperRight();
        }


	myMapWidget = new MapWidget(args);

}

function initializeLASRequest() {
  Req = new LASRequest('$las_request.toJavaScriptSafeString()');
}
function submitXML() {

  if ((myMapWidget.extents.selection.grid.x.min == myMapWidget.extents.selection.grid.x.max) || (myMapWidget.extents.selection.grid.y.min == myMapWidget.extents.selection.grid.y.max)) { myMapWidget.hide();
  } else {
    H_axis = '$las_map_scale.getAxis_horizontal().toLowerCase()';
    V_axis = '$las_map_scale.getAxis_vertical().toLowerCase()';
    axes="xyzt";
    if(H_axis&&axes.search(H_axis)>=0) 
    	Req.setRange(H_axis,myMapWidget.extents.selection.grid.x.min,myMapWidget.extents.selection.grid.x.max);
    if(V_axis&&axes.search(V_axis)>=0)
	Req.setRange(V_axis,myMapWidget.extents.selection.grid.y.min,myMapWidget.extents.selection.grid.y.max);
    
   
    var URL = './ProductServer.do?xml=' + escape(Req.getXMLText());
    document.location = URL;
  }
}
</script>
</html>
