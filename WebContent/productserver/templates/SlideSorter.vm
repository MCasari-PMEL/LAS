<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>

  <head>
    <title>SlideSorter</title>
<!-- 
 * Imported libaries:
 *
 * xmldom.js              Parses the LASRequest XML.  Used by LASRequest.js.
 * json.js                Parses the LASResponse JSON.  Used by LASResponse.js.
 * sarissa.js             Cross-browser wrapper for AJAX communication.
 * LatitudeWidget.js      Creates and populates a Latitude Selector.
 * LongitudeWidget.js     Creates and populates a Longitude Selector.
 * MenuWidget.js          Creates and populates a basic Selector (menu).
 * DateWidget.js          Creates and populates a date Widget (group of Selectors).
 * LASRequest.js          Provides an API for accessing/modifying LASRequest elements.
 * LASResponse.js         Provides an API for accessing LASResponse elements.
 * LASGrid.js             Provides an API for accessing LAS Grid elements.
 * LASContentCell.js      Creates and populates DOM elements according to content type.
 * LASSlideSorter.js      Creates a menu-controlled slide sorter of content cells
-->
    <script type="text/javascript" src="JavaScript/components/xmldom.js"></script>
    <script type="text/javascript" src="JavaScript/components/json.js"></script>
    <script type="text/javascript" src="JavaScript/components/sarissa.js"></script>
    <script type="text/javascript" src="JavaScript/components/MenuWidget.js"></script>
    <script type="text/javascript" src="JavaScript/components/LatitudeWidget.js"></script>
    <script type="text/javascript" src="JavaScript/components/LongitudeWidget.js"></script>
    <script type="text/javascript" src="JavaScript/components/DateWidget.js"></script>
    <script type="text/javascript" src="JavaScript/components/LASRequest.js"></script>
    <script type="text/javascript" src="JavaScript/components/LASResponse.js"></script>
    <script type="text/javascript" src="JavaScript/components/LASGrid.js"></script>
    <script type="text/javascript" src="JavaScript/components/LASContentCell.js"></script>
    <script type="text/javascript" src="JavaScript/components/LASSlideSorter.js"></script>
    <script type="text/javascript">


var dsid = "coads_climatology_cdf";
var varid = "sst";

#set( $view = $las_request.getProperty('ferret','view') )
var view = '$view';

function initializeLASSlideSorter() {
  // NOTE:  Req must be defined before LSS because the LSS object uses the Req
  // NOTE:  object in createLASRequest() when the LSS object is initialized.
  ReqImg = new LASRequest('$las_request.toJavaScriptSafeString()');
  ReqA = new LASRequest('$las_request.toJavaScriptSafeString()');
  dsid = ReqImg.getDataset();
  varid = ReqImg.getVariable();

  // set options field to values in request
  var user_option;
  if (view == 'x' || view == 'y' || view == 'z' || view == 't') {
    user_option = ReqImg.getProperty('ferret','dep_axis_scale');
  } else {
    user_option = ReqImg.getProperty('ferret','fill_levels');
  }
  if (user_option) {
    document.getElementById('LSS_optionTextField').value = user_option;
  }
  
  // Get the JSON representation of the Grid associated with this
  // dataset and variable.
  ## The tepmlating language has no access to javascript variables
  ## so we must get dsID and varID the 'template way'
  #set($dsID = $las_request.datasetIDs.get(0))
  #set($varID = $las_request.variableIDs.get(0))
  #set($grid = $las_config.getGrid($dsID,$varID))
  #set($grid_JSON = $grid.toJSON().toString())
  var gridJSON = '$grid_JSON';

  // First, make sure we can parse the LASResponse
  var Grid;
  var JSONObject;
  try {
    var JSONObject = gridJSON.parseJSON();
  } catch(e) {
    alert('Error parsing gridJSON as JSON.');
    return;
  }

  try {
    Grid = new LASGrid(JSONObject);
  } catch(e) {
    // TODO:  Create Error Cell with this text?
    alert(e);
    return;
  }

  // At this point we have what we hope is a valid Grid.

  // Clear the LSSInitObject();
  LSSInitObject = new Object();

  // Define any 'ensemble' axis if present
  ## Use the dsid and varid created earlier
  #set($dsID = $las_request.datasetIDs.get(0))
  #set($varID = $las_request.variableIDs.get(0))
  #set($var = $las_config.getVariable($dsID,$varID))
  #set($properties = $var.getProperties('ensemble'))
  // Hack to check if the ensemble property is defined
  #set($ensemble = 0)
  #foreach ($property in $properties)
    #set($ensemble = 1)
  #end
  #if ($ensemble)
    #set($initial_value = $properties.get(0).getValue())
  LSSInitObject["ensemble"] = new Object();
  LSSInitObject["ensemble"].title = 'Ensemble';
  LSSInitObject["ensemble"].initial_value = '$initial_value'
  LSSInitObject["ensemble"].type = 'menuWidget';
  menuContents = new Array;
    #set($counter = 0)
    #foreach ($property in $properties)
      #set($member_dsID = $property.value)
      #set($member_name = $las_config.getDataset($member_dsID).getName())
  menuContents[$counter] = new Array('$member_name','$member_dsID');
      #set($counter = $counter + 1)
    #end
  LSSInitObject["ensemble"].data = menuContents
  #end

  // Create the Longitude axis menus

  if (view != 'x' && view != 'xy' && view != 'xz' && view != 'xt') {
    if (Grid.hasAxis('x')) {
      LSSInitObject["x"] = new Object();
      LSSInitObject["x"].title = 'Longitude';
      LSSInitObject["x"].initial_value = ReqImg.getRangeLo('x');
      if (Grid.getAxis('x').v) {
        LSSInitObject["x"].type = 'menuWidget';
        LSSInitObject["x"].data = Grid.getMenu('x');
      } else {
// NOTE:  If it doesn't have a 'v' array it must have an 'arange'
        LSSInitObject["x"].type = 'longitudeWidget';
        LSSInitObject["x"].data = new Object();
        LSSInitObject["x"].data.lo = Grid.getLo('x');
        LSSInitObject["x"].data.hi = Grid.getHi('x');
        LSSInitObject["x"].data.delta = Grid.getDelta('x');
      }
    }
  }
    
  if (view != 'y' && view != 'xy' && view != 'yz' && view != 'yt') {
    if (Grid.hasAxis('y')) {
      LSSInitObject["y"] = new Object();
      LSSInitObject["y"].title = 'Latitude';
      LSSInitObject["y"].initial_value = ReqImg.getRangeLo('y');
      if (Grid.getAxis('y').v) {
        LSSInitObject["y"].type = 'menuWidget';
        LSSInitObject["y"].data = Grid.getMenu('y');
      } else {
// NOTE:  If it doesn't have a 'v' array it must have an 'arange'
        LSSInitObject["y"].type = 'latitudeWidget';
        LSSInitObject["y"].data = new Object();
        LSSInitObject["y"].data.lo = Grid.getLo('y');
        LSSInitObject["y"].data.hi = Grid.getHi('y');
        LSSInitObject["y"].data.delta = Grid.getDelta('y');
      }
    }
  }
    
  if (view != 'z' && view != 'xz' && view != 'yz' && view != 'zt') {
    if (Grid.hasAxis('z')) {
      LSSInitObject["z"] = new Object();
      LSSInitObject["z"].title = 'Depth';
      LSSInitObject["z"].initial_value = ReqImg.getRangeLo('z');
      LSSInitObject["z"].type = 'menuWidget';
      LSSInitObject["z"].data = Grid.getMenu('z');
    }
  }

  if (view != 't' && view != 'xt' && view != 'yt' && view != 'zt') {
    if (Grid.hasAxis('t')) {
      LSSInitObject["t"] = new Object();
      LSSInitObject["t"].title = 'Time';
      LSSInitObject["t"].initial_value = ReqImg.getRangeLo('t');
      if (Grid.getDisplayType('t') == 'menu') {
        LSSInitObject["t"].type = 'menuWidget';
        LSSInitObject["t"].data = Grid.getMenu('t');
      } else {
// NOTE:  If it's not of type 'menu' it must be of type 'widget'
        LSSInitObject["t"].type = 'dateWidget';
        LSSInitObject["t"].render_format = Grid.getRenderFormat('t');
        LSSInitObject["t"].data = new Object();
        LSSInitObject["t"].data.lo = Grid.getLo('t');
        LSSInitObject["t"].data.hi = Grid.getHi('t');
      }
    }
  }

  // Choose an initial menu

  var initial_menu;

  if (view.indexOf('t') == -1 && Grid.hasAxis('t')) {
    initial_menu = 't';
  } else {
    if (view.indexOf('z') == -1 && Grid.hasAxis('z')) {
      initial_menu = 'z';
    } else {
      if (view.indexOf('y') == -1 && Grid.hasAxis('y')) {
        initial_menu = 'y';
      } else {
        if (view.indexOf('x') == -1 && Grid.hasAxis('x')) {
          initial_menu = 'x';
        }
      }
    }
  }

  if (!initial_menu) {

    alert('This variable exists only on the axes used in the plot.  No comparison is possible with this variable');

  } else {

    // Reinitialize the SlideSorter
    LSS = new LASSlideSorter(document.LASSlideSorterForm,LSSInitObject);
    LSS.render("LASSlideSorter",2,2,initial_menu);
  }

}


/**
 * Updates the LASRequest to reflect the current state of the user interface.
 * @param AA AssociativeArray object of menu titles and user selected values
 * @return LASRequest
 */
function createLASRequest(AA) {

  ReqImg.prefix = 'ProductServer.do?xml=';
// NOTE:  In order to create a different default size for the SlideSorter
// NOTE:  I had to create a new menu name.  Of course, that property won't
// NOTE:  be understood by the Ferret scripts that expect 'size', so here
// NOTE:  we switch back by adding the 'size' property.
  var size_SS = ReqImg.getProperty('ferret','size_SS');
  if (size_SS == null) {
    ReqImg.setProperty('ferret','size','0.2')
  } else {
    ReqImg.setProperty('ferret','size',size_SS)
  }

// TODO:  Need to query the SlideSorter to determine the view instead of
// TODO:  of having it always set to the view of the original request.
  ReqImg.setProperty('ferret','view',view);


// Set the contour levels/scaling if defined
  var user_option =  document.getElementById('LSS_optionTextField').value;
  if (view == 'x' || view == 'y' || view == 'z' || view == 't') {
    ReqImg.setProperty('ferret','dep_axis_scale',user_option);
  } else {
    ReqImg.setProperty('ferret','fill_levels',user_option);
  }

  if (AA.ensemble) {
    ReqImg.removeVariables()
    ReqImg.addVariable(AA.ensemble,varid);
  }

  if (view != 'x' && view != 'xy' && view != 'xz' && view != 'xt') {
    if (AA.x) {
      ReqImg.setRange('x',AA.x);
    }
  }
  if (view != 'y' && view != 'xy' && view != 'yz' && view != 'yt') {
    if (AA.y) {
      ReqImg.setRange('y',AA.y);
    }
  }
  if (view != 'z' && view != 'xz' && view != 'yz' && view != 'zt') {
    if (AA.z) {
      ReqImg.setRange('z',AA.z);
    }
  }
  if (view != 't' && view != 'xt' && view != 'yt' && view != 'zt') {
    if (AA.t) {
      ReqImg.setRange('t',AA.t);
    }
  }

  if (view == 'x' || view == 'y' || view == 'z' || view == 't') {
    ReqImg.setOperation('Plot_1D');
  } else {
    if (view == 'xy') {
      ReqImg.setOperation('Plot_2D_XY');
    } else {
      ReqImg.setOperation('Plot_2D');
    }
  }

  return ReqImg;
}

/**
 * Handles the LASResponse returned from the XMLHTTP request,
 * creates the appropriate DOM elements based on the LASResponse and
 * inserts appropriate content into those DOM elements.
 */
function handleLASResponse(LASResponseText,row,col) {

  var contentCell_id = "LSS_ContentCell" + row + col; 

  var aGif_id = "aGif" + row + col;
  var aGif = document.getElementById(aGif_id);
  aGif.parentNode.parentNode.parentNode.parentNode.parentNode.style.backgroundColor = '#ACE';
  aGif.parentNode.parentNode.parentNode.parentNode.style.backgroundColor = '#ACE';
  aGif.parentNode.parentNode.parentNode.style.backgroundColor = '#ACE';
  aGif.style.visibility = 'hidden';

  // First, make sure we can parse the LASResponse
  var Response;
  try {
    var JSONObject = LASResponseText.parseJSON();
    Response = new LASResponse(JSONObject);
  } catch(e) {
    // TODO:  Create Error Cell with this text?
    alert('Error parsing LASResponse:  ' + e);
    return;
  }

  // We have a valid JSON object.

  var CCell = new LASContentCell();
  CCell.render(contentCell_id);

  if ( Response.isError() ) {
    CCell.display(Response,'las_message');
  } else {
    CCell.display(Response,'plot_image');
  }           
}

/**
 *
 */
function applyOptions() {
  LSS.loadAllImages();
}


  </script>

  <style type="text/css" media="all">
    @import "JavaScript/components/SlideSorter.css";
  </style>
</head>

<body onload="initializeLASSlideSorter()">

  <form id="LSS_Form" name="LASSlideSorterForm" onSubmit="return false">
    <div id="LSS_Container">

  	<table id="LSS_Table">
      <tbody>

        <tr class="LSS_optionRow">
          <td>
#if ($view == 'x' || $view == 'y' || $view == 'z' || $view == 't')
            <span id="LSS_optionLabel">Dependent axis scale</span>
#else
            <span id="LSS_optionLabel">Color fill levels</span>
#end
            <input id="LSS_optionTextField" type="text" name="LSS_optionTextField" onchange="javascript:applyOptions()"></input>
            <input id="ApplyButton" type="button" value="Apply" onclick="javascript:applyOptions()"></input>
          </td>
        </tr>

<!--
The SlideSorter render() method invoked during initialization above will 
automatically build the SlideSorter table inside the 'LASSlideSorter' DOM element.
-->

        <tr class="LSS_slideSorterRow">
          <td id="LASSlideSorter"> </td>
        </tr>

        <tr>
          <td class="LSS_footer">
            The LAS comparison plot interface was originally inspired by the
            <a href="http://www.ngdc.noaa.gov/wist/">Web Image Slide Tray</a> from NOAA/NGDC.
          </td>
        </tr>

      </tbody>
  	</table>

    </div>
  </form>

</body>

</html>
