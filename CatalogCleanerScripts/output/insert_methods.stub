	public static int insertCatalog(String name, String expires, String version, String base, String xmlns, String status) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogId = -1;

		try {
			ps = setPreparedStatement("insert_catalog", new String[]{name, expires, version, base, xmlns, status});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogId;
	}

	public static int insertCatalogDataset(int catalogId, int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogDatasetId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_dataset", new int[]{catalogId, datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogDatasetId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogDatasetId;
	}

	public static int insertCatalogProperty(String name, String value, int catalogId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogPropertyId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_property", new String[]{name, value}, new int[]{catalogId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogPropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogPropertyId;
	}

	public static int insertCatalogService(int catalogId, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogServiceId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_service", new int[]{catalogId, serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogServiceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogServiceId;
	}

	public static int insertCatalogXlink(String value, String xlink, int catalogId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogXlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_xlink", new String[]{value, xlink}, new int[]{catalogId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogXlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogXlinkId;
	}

	public static int insertCatalogref(int childId, int parentId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref", new int[]{childId, parentId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefId;
	}

	public static int insertCatalogrefDocumentation(String value, String documentationenum, int catalogrefId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefDocumentationId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation", new String[]{value, documentationenum}, new int[]{catalogrefId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefDocumentationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefDocumentationId;
	}

	public static int insertCatalogrefDocumentationNamespace(String namespace, int catalogrefDocumentationId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefDocumentationNamespaceId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation_namespace", new String[]{namespace}, new int[]{catalogrefDocumentationId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefDocumentationNamespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefDocumentationNamespaceId;
	}

	public static int insertCatalogrefDocumentationXlink(String value, String xlink, int catalogrefDocumentationId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefDocumentationXlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation_xlink", new String[]{value, xlink}, new int[]{catalogrefDocumentationId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefDocumentationXlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefDocumentationXlinkId;
	}

	public static int insertCatalogrefXlink(String value, String xlink, int catalogrefId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefXlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_xlink", new String[]{value, xlink}, new int[]{catalogrefId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefXlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefXlinkId;
	}

	public static int insertDataset(String harvest, String name, String alias, String authority, String dId, String servicename, String urlpath, String resourcecontrol, String collectiontype, String status, String datatype, String datasizeUnit) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetId = -1;

		try {
			ps = setPreparedStatement("insert_dataset", new String[]{harvest, name, alias, authority, dId, servicename, urlpath, resourcecontrol, collectiontype, status, datatype, datasizeUnit});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetId;
	}

	public static int insertDatasetAccess(String urlpath, String servicename, String dataformat, int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetAccessId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_access", new String[]{urlpath, servicename, dataformat}, new int[]{datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetAccessId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetAccessId;
	}

	public static int insertDatasetAccessDatasize(String value, String units, int datasetAccessId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetAccessDatasizeId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_access_datasize", new String[]{value, units}, new int[]{datasetAccessId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetAccessDatasizeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetAccessDatasizeId;
	}

	public static int insertDatasetCatalogref(int catalogrefId, int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetCatalogrefId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_catalogref", new int[]{catalogrefId, datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetCatalogrefId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetCatalogrefId;
	}

	public static int insertDatasetDataset(int parentId, int childId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetDatasetId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_dataset", new int[]{parentId, childId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetDatasetId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetDatasetId;
	}

	public static int insertDatasetNcml(int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetNcmlId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_ncml", new int[]{datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetNcmlId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetNcmlId;
	}

	public static int insertDatasetProperty(String name, String value, int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetPropertyId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_property", new String[]{name, value}, new int[]{datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetPropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetPropertyId;
	}

	public static int insertDatasetService(int datasetId, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetServiceId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_service", new int[]{datasetId, serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetServiceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetServiceId;
	}

	public static int insertDatasetTmg(int datasetId, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetTmgId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_tmg", new int[]{datasetId, tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetTmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetTmgId;
	}

	public static int insertMetadata(String metadatatype, String inherited) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int metadataId = -1;

		try {
			ps = setPreparedStatement("insert_metadata", new String[]{metadatatype, inherited});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataId;
	}

	public static int insertMetadataNamespace(String namespace, int metadataId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int metadataNamespaceId = -1;

		try {
			ps = setPreparedStatement("insert_metadata_namespace", new String[]{namespace}, new int[]{metadataId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataNamespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataNamespaceId;
	}

	public static int insertMetadataTmg(int tmgId, int metadataId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int metadataTmgId = -1;

		try {
			ps = setPreparedStatement("insert_metadata_tmg", new int[]{tmgId, metadataId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataTmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataTmgId;
	}

	public static int insertMetadataXlink(String value, String xlink, int metadataId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int metadataXlinkId = -1;

		try {
			ps = setPreparedStatement("insert_metadata_xlink", new String[]{value, xlink}, new int[]{metadataId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataXlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataXlinkId;
	}

	public static int insertService(String suffix, String name, String base, String desc, String servicetype, String status) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int serviceId = -1;

		try {
			ps = setPreparedStatement("insert_service", new String[]{suffix, name, base, desc, servicetype, status});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceId;
	}

	public static int insertServiceDatasetroot(String path, String location, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int serviceDatasetrootId = -1;

		try {
			ps = setPreparedStatement("insert_service_datasetroot", new String[]{path, location}, new int[]{serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceDatasetrootId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceDatasetrootId;
	}

	public static int insertServiceProperty(String value, String name, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int servicePropertyId = -1;

		try {
			ps = setPreparedStatement("insert_service_property", new String[]{value, name}, new int[]{serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			servicePropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return servicePropertyId;
	}

	public static int insertServiceService(int childId, int parentId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int serviceServiceId = -1;

		try {
			ps = setPreparedStatement("insert_service_service", new int[]{childId, parentId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceServiceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceServiceId;
	}

	public static int insertTmg() throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgId = -1;

		try {
			ps = setPreparedStatement("insert_tmg");

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgId;
	}

	public static int insertTmgAuthority(String authority, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgAuthorityId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_authority", new String[]{authority}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgAuthorityId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgAuthorityId;
	}

	public static int insertTmgContributor(String role, String name, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgContributorId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_contributor", new String[]{role, name}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgContributorId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgContributorId;
	}

	public static int insertTmgCreator(int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgCreatorId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator", new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgCreatorId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgCreatorId;
	}

	public static int insertTmgCreatorContact(String email, String url, int tmgCreatorId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgCreatorContactId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator_contact", new String[]{email, url}, new int[]{tmgCreatorId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgCreatorContactId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgCreatorContactId;
	}

	public static int insertTmgCreatorName(String value, String vocabulary, int tmgCreatorId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgCreatorNameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator_name", new String[]{value, vocabulary}, new int[]{tmgCreatorId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgCreatorNameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgCreatorNameId;
	}

	public static int insertTmgDataformat(String dataformat, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDataformatId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_dataformat", new String[]{dataformat}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDataformatId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDataformatId;
	}

	public static int insertTmgDatasize(String value, String units, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDatasizeId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_datasize", new String[]{value, units}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDatasizeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDatasizeId;
	}

	public static int insertTmgDatatype(String datatype, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDatatypeId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_datatype", new String[]{datatype}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDatatypeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDatatypeId;
	}

	public static int insertTmgDate(String format, String value, String dateenum, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDateId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_date", new String[]{format, value, dateenum}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDateId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDateId;
	}

	public static int insertTmgDocumentation(String value, String documentationenum, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDocumentationId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation", new String[]{value, documentationenum}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDocumentationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDocumentationId;
	}

	public static int insertTmgDocumentationNamespace(String namespace, int tmgDocumentationId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDocumentationNamespaceId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation_namespace", new String[]{namespace}, new int[]{tmgDocumentationId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDocumentationNamespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDocumentationNamespaceId;
	}

	public static int insertTmgDocumentationXlink(String value, String xlink, int tmgDocumentationId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDocumentationXlinkId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation_xlink", new String[]{value, xlink}, new int[]{tmgDocumentationId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDocumentationXlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDocumentationXlinkId;
	}

	public static int insertTmgGeospatialcoverage(String upordown, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage", new String[]{upordown}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageId;
	}

	public static int insertTmgGeospatialcoverageEastwest(String size, String units, String start, String resolution, int tmgGeospatialcoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageEastwestId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_eastwest", new String[]{size, units, start, resolution}, new int[]{tmgGeospatialcoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageEastwestId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageEastwestId;
	}

	public static int insertTmgGeospatialcoverageName(String vocabulary, String value, int tmgGeospatialcoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageNameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_name", new String[]{vocabulary, value}, new int[]{tmgGeospatialcoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageNameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageNameId;
	}

	public static int insertTmgGeospatialcoverageNorthsouth(String size, String resolution, String start, String units, int tmgGeospatialcoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageNorthsouthId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_northsouth", new String[]{size, resolution, start, units}, new int[]{tmgGeospatialcoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageNorthsouthId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageNorthsouthId;
	}

	public static int insertTmgGeospatialcoverageUpdown(String start, String resolution, String size, String units, int tmgGeospatialcoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageUpdownId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_updown", new String[]{start, resolution, size, units}, new int[]{tmgGeospatialcoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageUpdownId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageUpdownId;
	}

	public static int insertTmgKeyword(String value, String vocabulary, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgKeywordId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_keyword", new String[]{value, vocabulary}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgKeywordId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgKeywordId;
	}

	public static int insertTmgMetadata(int tmgId, int metadataId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgMetadataId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_metadata", new int[]{tmgId, metadataId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgMetadataId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgMetadataId;
	}

	public static int insertTmgProject(String value, String vocabulary, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgProjectId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_project", new String[]{value, vocabulary}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgProjectId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgProjectId;
	}

	public static int insertTmgProperty(String name, String value, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgPropertyId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_property", new String[]{name, value}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgPropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgPropertyId;
	}

	public static int insertTmgPublisher(int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgPublisherId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher", new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgPublisherId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgPublisherId;
	}

	public static int insertTmgPublisherContact(String url, String email, int tmgPublisherId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgPublisherContactId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher_contact", new String[]{url, email}, new int[]{tmgPublisherId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgPublisherContactId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgPublisherContactId;
	}

	public static int insertTmgPublisherName(String value, String vocabulary, int tmgPublisherId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgPublisherNameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher_name", new String[]{value, vocabulary}, new int[]{tmgPublisherId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgPublisherNameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgPublisherNameId;
	}

	public static int insertTmgServicename(String servicename, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgServicenameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_servicename", new String[]{servicename}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgServicenameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgServicenameId;
	}

	public static int insertTmgTimecoverage(String resolution, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage", new String[]{resolution}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageId;
	}

	public static int insertTmgTimecoverageDuration(String duration, int tmgTimecoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageDurationId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_duration", new String[]{duration}, new int[]{tmgTimecoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageDurationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageDurationId;
	}

	public static int insertTmgTimecoverageEnd(String format, String value, String dateenum, int tmgTimecoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageEndId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_end", new String[]{format, value, dateenum}, new int[]{tmgTimecoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageEndId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageEndId;
	}

	public static int insertTmgTimecoverageResolution(String duration, int tmgTimecoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageResolutionId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_resolution", new String[]{duration}, new int[]{tmgTimecoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageResolutionId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageResolutionId;
	}

	public static int insertTmgTimecoverageStart(String format, String value, String dateenum, int tmgTimecoverageId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageStartId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_start", new String[]{format, value, dateenum}, new int[]{tmgTimecoverageId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageStartId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageStartId;
	}

	public static int insertTmgVariables(String vocabulary, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgVariablesId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables", new String[]{vocabulary}, new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgVariablesId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgVariablesId;
	}

	public static int insertTmgVariablesVariable(String units, String name, String vocabularyName, int tmgVariablesId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgVariablesVariableId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables_variable", new String[]{units, name, vocabularyName}, new int[]{tmgVariablesId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgVariablesVariableId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgVariablesVariableId;
	}

	public static int insertTmgVariablesVariablemap(String value, String xlink, int tmgVariablesId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgVariablesVariablemapId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables_variablemap", new String[]{value, xlink}, new int[]{tmgVariablesId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgVariablesVariablemapId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgVariablesVariablemapId;
	}

