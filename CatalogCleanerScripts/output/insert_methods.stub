	public static int insertCatalog(String name, String expires, String version, String base, String xmlns, String status) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogId = -1;

		try {
			ps = setPreparedStatement("insert_catalog", new String[]{name, expires, version, base, xmlns, status});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogId;
	}

	public static int insertCatalogDataset(int catalogId, int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_catalog_dataset", new int[]{catalogId, datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetId;
	}

	public static int insertCatalogProperty(int catalogId, String name, String value) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int propertyId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_property", new int[]{catalogId}, new String[]{name, value});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			propertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return propertyId;
	}

	public static int insertCatalogService(int catalogId, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_catalog_service", new int[]{catalogId, serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceId;
	}

	public static int insertCatalogXlink(int catalogId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int xlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalog_xlink", new int[]{catalogId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			xlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return xlinkId;
	}

	public static int insertCatalogref() throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref");

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefId;
	}

	public static int insertCatalogrefDocumentation(int catalogrefId, String value, String documentationenum) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefDocumentationId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation", new int[]{catalogrefId}, new String[]{value, documentationenum});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefDocumentationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefDocumentationId;
	}

	public static int insertCatalogrefDocumentationNamespace(int catalogrefDocumentationId, String namespace) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int catalogrefDocumentationNamespaceId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation_namespace", new int[]{catalogrefDocumentationId}, new String[]{namespace});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefDocumentationNamespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefDocumentationNamespaceId;
	}

	public static int insertCatalogrefDocumentationXlink(int catalogrefDocumentationId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int xlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_documentation_xlink", new int[]{catalogrefDocumentationId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			xlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return xlinkId;
	}

	public static int insertCatalogrefXlink(int catalogrefId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int xlinkId = -1;

		try {
			ps = setPreparedStatement("insert_catalogref_xlink", new int[]{catalogrefId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			xlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return xlinkId;
	}

	public static int insertDataset(String harvest, String name, String alias, String authority, String dId, String servicename, String urlpath, String resourcecontrol, String collectiontype, String status, String datatype, String datasizeUnit) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetId = -1;

		try {
			ps = setPreparedStatement("insert_dataset", new String[]{harvest, name, alias, authority, dId, servicename, urlpath, resourcecontrol, collectiontype, status, datatype, datasizeUnit});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetId;
	}

	public static int insertDatasetAccess(int datasetId, String urlpath, String servicename, String dataformat) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetAccessId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_access", new int[]{datasetId}, new String[]{urlpath, servicename, dataformat});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetAccessId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetAccessId;
	}

	public static int insertDatasetAccessDatasize(int datasetAccessId, String value, String units) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetAccessDatasizeId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_access_datasize", new int[]{datasetAccessId}, new String[]{value, units});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetAccessDatasizeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetAccessDatasizeId;
	}

	public static int insertDatasetCatalogref(int datasetId, int catalogrefId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_dataset_catalogref", new int[]{datasetId, catalogrefId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			catalogrefId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return catalogrefId;
	}

	public static int insertDatasetDataset(int parentId, int childId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_dataset_dataset", new int[]{parentId, childId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			childId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return childId;
	}

	public static int insertDatasetNcml(int datasetId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetNcmlId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_ncml", new int[]{datasetId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetNcmlId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetNcmlId;
	}

	public static int insertDatasetProperty(int datasetId, String name, String value) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datasetPropertyId = -1;

		try {
			ps = setPreparedStatement("insert_dataset_property", new int[]{datasetId}, new String[]{name, value});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datasetPropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datasetPropertyId;
	}

	public static int insertDatasetService(int datasetId, int serviceId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_dataset_service", new int[]{datasetId, serviceId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceId;
	}

	public static int insertDatasetTmg(int datasetId, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_dataset_tmg", new int[]{datasetId, tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgId;
	}

	public static int insertMetadata(String metadatatype, String inherited) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int metadataId = -1;

		try {
			ps = setPreparedStatement("insert_metadata", new String[]{metadatatype, inherited});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataId;
	}

	public static int insertMetadataNamespace(int metadataId, String namespace) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int namespaceId = -1;

		try {
			ps = setPreparedStatement("insert_metadata_namespace", new int[]{metadataId}, new String[]{namespace});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			namespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return namespaceId;
	}

	public static int insertMetadataTmg(int metadataId, int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_metadata_tmg", new int[]{metadataId, tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgId;
	}

	public static int insertMetadataXlink(int metadataId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int xlinkId = -1;

		try {
			ps = setPreparedStatement("insert_metadata_xlink", new int[]{metadataId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			xlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return xlinkId;
	}

	public static int insertService(String suffix, String name, String base, String desc, String servicetype, String status) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int serviceId = -1;

		try {
			ps = setPreparedStatement("insert_service", new String[]{suffix, name, base, desc, servicetype, status});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceId;
	}

	public static int insertServiceDatasetroot(int serviceId, String path, String location) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int serviceDatasetrootId = -1;

		try {
			ps = setPreparedStatement("insert_service_datasetroot", new int[]{serviceId}, new String[]{path, location});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			serviceDatasetrootId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return serviceDatasetrootId;
	}

	public static int insertServiceProperty(int serviceId, String value, String name) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int propertyId = -1;

		try {
			ps = setPreparedStatement("insert_service_property", new int[]{serviceId}, new String[]{value, name});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			propertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return propertyId;
	}

	public static int insertServiceService(int parentId, int childId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_service_service", new int[]{parentId, childId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			childId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return childId;
	}

	public static int insertTmg() throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgId = -1;

		try {
			ps = setPreparedStatement("insert_tmg");

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgId;
	}

	public static int insertTmgAuthority(int tmgId, String authority) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int authorityId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_authority", new int[]{tmgId}, new String[]{authority});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			authorityId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return authorityId;
	}

	public static int insertTmgContributor(int tmgId, String role, String name) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgContributorId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_contributor", new int[]{tmgId}, new String[]{role, name});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgContributorId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgContributorId;
	}

	public static int insertTmgCreator(int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int creatorId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator", new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			creatorId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return creatorId;
	}

	public static int insertTmgCreatorContact(int tmgCreatorId, String email, String url) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgCreatorContactId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator_contact", new int[]{tmgCreatorId}, new String[]{email, url});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgCreatorContactId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgCreatorContactId;
	}

	public static int insertTmgCreatorName(int tmgCreatorId, String value, String vocabulary) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int nameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_creator_name", new int[]{tmgCreatorId}, new String[]{value, vocabulary});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			nameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return nameId;
	}

	public static int insertTmgDataformat(int tmgId, String dataformat) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int dataformatId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_dataformat", new int[]{tmgId}, new String[]{dataformat});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			dataformatId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return dataformatId;
	}

	public static int insertTmgDatasize(int tmgId, String value, String units) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDatasizeId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_datasize", new int[]{tmgId}, new String[]{value, units});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDatasizeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDatasizeId;
	}

	public static int insertTmgDatatype(int tmgId, String datatype) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int datatypeId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_datatype", new int[]{tmgId}, new String[]{datatype});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			datatypeId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return datatypeId;
	}

	public static int insertTmgDate(int tmgId, String format, String value, String dateenum) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int dateId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_date", new int[]{tmgId}, new String[]{format, value, dateenum});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			dateId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return dateId;
	}

	public static int insertTmgDocumentation(int tmgId, String value, String documentationenum) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDocumentationId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation", new int[]{tmgId}, new String[]{value, documentationenum});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDocumentationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDocumentationId;
	}

	public static int insertTmgDocumentationNamespace(int tmgDocumentationId, String namespace) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgDocumentationNamespaceId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation_namespace", new int[]{tmgDocumentationId}, new String[]{namespace});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgDocumentationNamespaceId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgDocumentationNamespaceId;
	}

	public static int insertTmgDocumentationXlink(int tmgDocumentationId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int xlinkId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_documentation_xlink", new int[]{tmgDocumentationId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			xlinkId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return xlinkId;
	}

	public static int insertTmgGeospatialcoverage(int tmgId, String upordown) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int geospatialcoverageId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage", new int[]{tmgId}, new String[]{upordown});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			geospatialcoverageId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return geospatialcoverageId;
	}

	public static int insertTmgGeospatialcoverageEastwest(int tmgGeospatialcoverageId, String size, String units, String start, String resolution) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageEastwestId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_eastwest", new int[]{tmgGeospatialcoverageId}, new String[]{size, units, start, resolution});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageEastwestId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageEastwestId;
	}

	public static int insertTmgGeospatialcoverageName(int tmgGeospatialcoverageId, String vocabulary, String value) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageNameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_name", new int[]{tmgGeospatialcoverageId}, new String[]{vocabulary, value});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageNameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageNameId;
	}

	public static int insertTmgGeospatialcoverageNorthsouth(int tmgGeospatialcoverageId, String size, String resolution, String start, String units) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgGeospatialcoverageNorthsouthId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_northsouth", new int[]{tmgGeospatialcoverageId}, new String[]{size, resolution, start, units});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgGeospatialcoverageNorthsouthId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgGeospatialcoverageNorthsouthId;
	}

	public static int insertTmgGeospatialcoverageUpdown(int tmgGeospatialcoverageId, String start, String resolution, String size, String units) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int updownId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_geospatialcoverage_updown", new int[]{tmgGeospatialcoverageId}, new String[]{start, resolution, size, units});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			updownId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return updownId;
	}

	public static int insertTmgKeyword(int tmgId, String value, String vocabulary) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int keywordId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_keyword", new int[]{tmgId}, new String[]{value, vocabulary});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			keywordId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return keywordId;
	}

	public static int insertTmgMetadata(int tmgId, int metadataId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			ps = setPreparedStatement("insert_tmg_metadata", new int[]{tmgId, metadataId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			metadataId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return metadataId;
	}

	public static int insertTmgProject(int tmgId, String value, String vocabulary) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgProjectId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_project", new int[]{tmgId}, new String[]{value, vocabulary});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgProjectId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgProjectId;
	}

	public static int insertTmgProperty(int tmgId, String name, String value) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgPropertyId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_property", new int[]{tmgId}, new String[]{name, value});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgPropertyId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgPropertyId;
	}

	public static int insertTmgPublisher(int tmgId) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int publisherId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher", new int[]{tmgId});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			publisherId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return publisherId;
	}

	public static int insertTmgPublisherContact(int tmgPublisherId, String url, String email) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int contactId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher_contact", new int[]{tmgPublisherId}, new String[]{url, email});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			contactId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return contactId;
	}

	public static int insertTmgPublisherName(int tmgPublisherId, String value, String vocabulary) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int nameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_publisher_name", new int[]{tmgPublisherId}, new String[]{value, vocabulary});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			nameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return nameId;
	}

	public static int insertTmgServicename(int tmgId, String servicename) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgServicenameId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_servicename", new int[]{tmgId}, new String[]{servicename});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgServicenameId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgServicenameId;
	}

	public static int insertTmgTimecoverage(int tmgId, String resolution) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage", new int[]{tmgId}, new String[]{resolution});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageId;
	}

	public static int insertTmgTimecoverageDuration(int tmgTimecoverageId, String duration) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int durationId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_duration", new int[]{tmgTimecoverageId}, new String[]{duration});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			durationId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return durationId;
	}

	public static int insertTmgTimecoverageEnd(int tmgTimecoverageId, String format, String value, String dateenum) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageEndId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_end", new int[]{tmgTimecoverageId}, new String[]{format, value, dateenum});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageEndId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageEndId;
	}

	public static int insertTmgTimecoverageResolution(int tmgTimecoverageId, String duration) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int resolutionId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_resolution", new int[]{tmgTimecoverageId}, new String[]{duration});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			resolutionId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return resolutionId;
	}

	public static int insertTmgTimecoverageStart(int tmgTimecoverageId, String format, String value, String dateenum) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgTimecoverageStartId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_timecoverage_start", new int[]{tmgTimecoverageId}, new String[]{format, value, dateenum});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgTimecoverageStartId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgTimecoverageStartId;
	}

	public static int insertTmgVariables(int tmgId, String vocabulary) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int variablesId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables", new int[]{tmgId}, new String[]{vocabulary});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			variablesId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return variablesId;
	}

	public static int insertTmgVariablesVariable(int tmgVariablesId, String units, String name, String vocabularyName) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int tmgVariablesVariableId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables_variable", new int[]{tmgVariablesId}, new String[]{units, name, vocabularyName});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			tmgVariablesVariableId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return tmgVariablesVariableId;
	}

	public static int insertTmgVariablesVariablemap(int tmgVariablesId, String value, String xlink) throws Exception{

		PreparedStatement ps = null;
		ResultSet rs = null;
		int variablemapId = -1;

		try {
			ps = setPreparedStatement("insert_tmg_variables_variablemap", new int[]{tmgVariablesId}, new String[]{value, xlink});

			log.debug("About to send: {} to the database.", ps.toString());
			rs = ps.executeQuery();
			rs.next();
			variablemapId = rs.getInt(1);
		}
		catch (SQLException e) {
			log.error("Caching: Could not access the database/cache. {}", e);
			throw new Exception("SQLException: " + e.getMessage());
		} finally {
			try {
				ps.close();
//				rs.close();
			}
			catch (SQLException e) {
				log.error("Cache read: Could not close the prepared statement. {}", e);
			}
		}
		return variablemapId;
	}

