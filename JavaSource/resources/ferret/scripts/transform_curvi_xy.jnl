! transform_curvi_xy.jnl
! 
! 18-Apr-2007 extracted from LAS_transforms.jnl
! Set up for curvilinear XY data: curvilinear-to-rectilinear regridding
! or native curvilinear xy plots or sample from curvilinear coordinates.

DEFINE SYMBOL which_var ($num)

IF `($constraint_0_lhs"0|Curv_to_Rect_Regridding>1|*>0")` THEN 
   DEFINE SYMBOL data_var_transform = , Regridded Curvilinear to Rectilinear ($constraint_0_rhs)-degree Grid,
      DEFINE SYMBOL data_dup_varname ($data_var)_regrid

ELIF  `STRINDEX("($ferret_view)", "xy") EQ 0` THEN
   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN 
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
      DEFINE SYMBOL data_dup_varname ($data_var)_sample
   ENDIF

ELSE
   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN \
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
ENDIF

! Check the regions in x and y. The Sampling schemes work best if they
! dont have to do moduloing; reset x regions to try to match the longitude
! coordinate variable, and call the initialize_region script again.

! For large datasets, we might pre-set these in the initialization script. 
! Compute them only if undefined

IF `($ferret_curv_lon_min"1|*>0")` THEN \
   DEFINE SYMBOL ferret_curv_lon_min = `($ferret_curvi_coord_lon)[d=($data_num),x=@min,y=@min]`
IF `($ferret_curv_lon_max"1|*>0")` THEN \
   DEFINE SYMBOL ferret_curv_lon_max = `($ferret_curvi_coord_lon)[d=($data_num),x=@max,y=@max]`

! e.g. tripolar grid where the range is 0 to 426 messes up the calculations...

IF `($ferret_curv_lon_max)- ($ferret_curv_lon_min) GT 360` THEN DEFINE SYMBOL ferret_curv_lon_max `($ferret_curv_lon_min) + 360`

IF `($region_x_lo_orig"0|*>1") EQ 0` THEN
   DEFINE SYMBOL region_0_x_lo_orig =  ($region_0_x_lo)
   DEFINE SYMBOL region_0_x_hi_orig =  ($region_0_x_hi)
ENDIF

IF `($region_($num)_x_lo) LT ($ferret_curv_lon_min)` THEN 
   DEFINE SYMBOL region_0_x_lo `($region_0_x_lo) + 360`
   DEFINE SYMBOL region_0_x_hi `($region_0_x_hi) + 360`

   GO LAS_initialize_region ($num)

ENDIF
IF `($region_($num)_x_hi) GT ($ferret_curv_lon_max)` THEN 
   DEFINE SYMBOL region_0_x_lo `($region_0_x_lo) - 360`
   DEFINE SYMBOL region_0_x_hi `($region_0_x_hi) - 360`

   GO LAS_initialize_region ($num)

   IF `($region_($num)_x_lo) LT ($ferret_curv_lon_min)` THEN  ! still crosses branch cut
      DEFINE SYMBOL two_slices 1  ! will need to use all xcoords (get_curv_coord_box)
   ENDIF
ENDIF

IF `($hvlimits_curvi"0|*>1") EQ 0` THEN \
   DEFINE SYMBOL hvlimits_curvi = /HLIM=($region_0_x_lo):($region_0_x_hi)/VLIM=($region_0_y_lo):($region_0_y_hi)
   DEFINE SYMBOL ferret_curvi_quals = ($hvlimits_curvi)

! If this is a vector plot, do operations here only once, on the first 
! vector component

DEFINE SYMBOL check_linear = 1
IF ` ($operation_ID"0|Plot_vector>1|*>0") AND ($num) GT 0` THEN DEFINE SYMBOL check_linear = 0

! When x and/or y analysis is requested for data on a curvilinear grid,
! and if the region is in the curvilienar portion of the grid, then first
! do a curvi-to-rectilinear regridding.

!!IF `($ferret_linear_coords_file"0|*>1") AND ($check_linear) AND \

IF `($check_linear) AND ($analysis_def"0|*>1") ` THEN 
      GO LAS_set_x_y_analysis.jnl
      GO LAS_set_regridding_for_analysis
ENDIF

! curvilinear to rectilinear regridding

IF `($constraint_0_lhs"0|Curv_to_Rect_Regridding>1|*>0")` THEN
   IF ($region_t"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_t)
   IF ($region_z"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_z)
   IF ($region_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_zt)
   IF ($region_($which_var)_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_($which_var)_zt)
   
   GO transform_curv_to_rect.jnl
   EXIT/SCRIPT
ENDIF

!!!!!!!!!!!

! Special setup, if a latitude has been specified such that the grid
! is linear south of ($ferret_linear_lat_max)

! Here we check whether the region is within the part of the grid that is rectilinear.
! If it is, then redefine the axes and proceed as if it is a rectilinear grid. Otherwise
! call LAS_set_strides_curvilinear.jnl

IF `($ferret_linear_coords_file"0|*>1") AND ($check_linear)` THEN

   IF `($ferret_linear_lat_max"0|*>1") AND (($region_y_hi"0")  LT ($ferret_linear_lat_max))` THEN 
   
! If we have a precomputed set of new axes, and if we are in the linear portion of
! the grid, then redefine the axes.

! First see if we have been told that the underlying coordinate axes have the
! correct coordinates in the rectilinear portion of the grid (as in the GFDL tripolar grids)
      IF `STRCMP("($ferret_linear_coords_file)", "same_as_infile") EQ 0` THEN
      
! Now we no longer need to deal with this data as being on a curvilinear grid

         CANCEL SYMBOL ferret_curvi_coord_lon
         CANCEL SYMBOL ferret_curvi_coord_lat
         DEFINE SYMBOL do_curvi_xy = 0
         DEFINE SYMBOL do_curvi_xy_and_hybrid_z = 0

         EXIT/SCRIPT
      ENDIF
 
      SET DATA "($ferret_linear_coords_file)"
      DEFINE SYMBOL xaxunits = `(HYCOM_lon_axis).units`
      DEFINE SYMBOL yaxunits = `(HYCOM_lat_axis).units`
      CANCEL DATA "($ferret_linear_coords_file)"

      IF ($data_var_only"0|*>1") THEN
         DEFINE AXIS/X/UNITS="($xaxunits)"/modulo `($data_var_only),RETURN=xaxis` = x[gx=HYCOM_lon_axis]
         DEFINE AXIS/Y/UNITS="($yaxunits)" `($data_var_only),RETURN=yaxis` = y[gy=HYCOM_lat_axis]
      ELSE
         DEFINE AXIS/X/UNITS="($xaxunits)"/modulo `($data_var),RETURN=xaxis` = x[gx=HYCOM_lon_axis]
         DEFINE AXIS/Y/UNITS="($yaxunits)" `($data_var),RETURN=yaxis` = y[gy=HYCOM_lat_axis]
      ENDIF

! Now we no longer need to deal with this data as being on a curvilinear grid

      CANCEL SYMBOL ferret_curvi_coord_lon
      CANCEL SYMBOL ferret_curvi_coord_lat
      DEFINE SYMBOL do_curvi_xy = 0
      DEFINE SYMBOL do_curvi_xy_and_hybrid_z = 0
   
! Because we have redefined the axes we cant set native strides
      DEFINE SYMBOL no_native_strides_xy = 1
      EXIT/SCRIPT
   
   ELSE
   
! Get the range of I,J needed to grab the region. Use it to define the 
! plot or output variable.
        
      GO get_curv_coord_bbox.jnl

! Set striding. If this is a comparison plot do it only on the second
! variable.

      IF `($num)+1 EQ ($data_count)` THEN GO LAS_set_strides_curvilinear.jnl
   ENDIF

ELSE
   ! set box and strides for curvi
   
   GO get_curv_coord_bbox.jnl

   IF ($analysis_def"0|*>1") THEN
      GO LAS_set_x_y_analysis.jnl
      GO LAS_set_regridding_for_analysis

      
      ! curvilinear to rectilinear regridding

      IF `($constraint_0_lhs"0|Curv_to_Rect_Regridding>1|*>0")` THEN
         IF ($region_t"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_t)
         IF ($region_z"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_z)
         IF ($region_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_zt)
         IF ($region_($which_var)_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_($which_var)_zt)
   
         GO transform_curv_to_rect.jnl
         EXIT/SCRIPT
      ENDIF

   ENDIF

   GO LAS_set_strides_curvilinear.jnl

ENDIF

!!!!!!!!!!!

! Set up native curvilinear plots
LET/TITLE="Longitude"/units=degrees xcoord = ($ferret_curvi_coord_lon)[d=($data_num)]
LET/TITLE="Latitude"/units=degrees  ycoord = ($ferret_curvi_coord_lat)[d=($data_num)]

!   Native plot in XY

IF ($ferret_view"|xy>1|*>0") THEN

   DEFINE SYMBOL native_curvilinear_xy = 1

! Get the range of I,J needed to grab the region. Use it to define the plot or output variable.

   LET/TITLE="Longitude"/units=degrees xcoord = \
          ($ferret_curvi_coord_lon)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   LET/TITLE="Latitude"/units=degrees  ycoord = \ 
          ($ferret_curvi_coord_lat)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]

   LET/d=($data_num) plot_var = ($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   IF ($region_zt"0|*>1") THEN LET/d=($data_num) plot_var = \
        ($data_var)[d=($data_num),($region_zt),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   IF ($region_($which_var)_zt"0|*>1") THEN LET/d=($data_num) plot_var = \
        ($data_var)[d=($data_num),($region_($which_var)_zt),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]

   DEFINE SYMBOL ferret_plot_base_var = ($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]

   IF ($region_zt"0|*>1") THEN DEFINE SYMBOL ferret_plot_base_var = \
        ($data_var)[d=($data_num),($region_zt),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   IF ($region_($which_var)_zt"0|*>1") THEN DEFINE SYMBOL ferret_plot_base_var = \
        ($data_var)[d=($data_num),($region_($which_var)_zt),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]

   DEFINE SYMBOL ferret_plot_base_var_($which_var) ($ferret_plot_base_var)

   DEFINE SYMBOL ferret_plot_var ($expr1)plot_var[d=($data_num)]($expr2), xcoord, ycoord
   DEFINE SYMBOL ferret_plot_var_m360 ($expr1)plot_var[d=($data_num)]($expr2), xcoord-360, ycoord
   IF ($region_zt"0|*>1") THEN 
      DEFINE SYMBOL ferret_plot_var ($expr1)plot_var[d=($data_num)]($expr2), xcoord, ycoord
      DEFINE SYMBOL ferret_plot_var_m360 ($expr1)plot_var[d=($data_num)]($expr2), xcoord-360, ycoord
   ENDIF
   DEFINE SYMBOL ferret_plot_title "($expr1)($data_title)($expr2) ($data_units) Native Curvilinear Plot"

   IF ($expr3"0|*>1") THEN
      DEFINE SYMBOL ferret_plot_var ($expr1)plot_var[d=($data_num)]($expr3)plot_var[d=($data_num)]($expr4), xcoord, ycoord
      DEFINE SYMBOL ferret_plot_var_m360 ($expr1)plot_var[d=($data_num)]($expr3)plot_var[d=($data_num)]($expr4), xcoord-360, ycoord
      IF ($region_zt"0|*>1") THEN 
         DEFINE SYMBOL ferret_plot_var \
             ($expr1)plot_var[d=($data_num)]($expr3)plot_var[d=($data_num)]($expr4), xcoord, ycoord
         DEFINE SYMBOL ferret_plot_var_m360 \
             ($expr1)plot_var[d=($data_num)]($expr3)plot_var[d=($data_num)]($expr4), xcoord-360, ycoord
      ENDIF
      DEFINE SYMBOL ferret_plot_title "($expr1)($data_title)($expr3)($data_title)($expr4) ($data_units) Native Curvilinear Plot"
   ENDIF

! and if the longitudes are in a different modulo branch than requested add /MODULO
   LET its_vector =  STRINDEX("($operation_ID)", "vector") NE 0
   IF `($ferret_lon_modulo"1|1|0|yes>1|no>0|*>0") AND ( ($num)+1 EQ ($data_count) )` THEN 
      LET outside = 0
      IF ($ferret_curv_lon_min"0|*>1") THEN 
         LET xc1 = ($ferret_curv_lon_min)
      ELSE
         LET strd = (($clat_jmax)-($clat_jmin))/100
	 IF `strd LT 1` THEN LET strd  = 1
         LET xc1 = xcoord[i=($clon_imin),j=($clat_jmin):($clat_jmax):`strd`]
      ENDIF
      IF ($ferret_curv_lon_max"0|*>1") THEN 
         LET xcn = ($ferret_curv_lon_max)
      ELSE
         LET strd = (($clat_jmax)-($clat_jmin))/100
	 IF `strd LT 1` THEN LET strd  = 1
         LET xcn = xcoord[i=($clon_imax),j=($clat_jmin):($clat_jmax):`strd`]
      ENDIF
      LET outside = `xc1 GT ($region_($num)_x_lo)` + `xcn LT ($region_($num)_x_hi)`
      IF `($ferret_lon_modulo"1|1|0|yes>1|no>0|*>0") AND outside GT 0 AND its_vector EQ 0` THEN \
          DEFINE SYMBOL ferret_lon_modulo = 1 
   ENDIF
   ! set up for native curvi xy

! Or set up for native slices: Sample in the X and Y directions of the slice

ELIF `STRLEN ("($ferret_view)") LE 2` THEN

   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN 
      GO curvi_sample_slice.jnl
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
   ELSE
      GO curvi_nrst_slice.jnl
   ENDIF

ELIF `STRLEN ("($ferret_view)") GT 2 AND STRINDEX("($ferret_view)", "xy") GT 0` THEN  ! google placemarks

   DEFINE SYMBOL native_curvilinear_xy = 1

ENDIF

! End of $RCSfile ------------transform_curvi_xy.jnl-------------------------------

