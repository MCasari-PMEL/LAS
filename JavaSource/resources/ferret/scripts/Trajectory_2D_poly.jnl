!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! $Header$
! Trajectory_2D_poly.jnl
!
! Creates a 2D plot with a blank 'basemap' and an overlay of points
! colored by the ($ferret_plot_var) defined in LAS_initialize_data_insitu.
!
! 1/2010 acm - For Cruise ID, thin out the icons which are too dense to see well.
!              leave a thin dotted line at the original density
!              add to the title, "from data sampled every xxx"
! 12/2013 ACM  Always draw with ribbon plot style
!


DEFINE SYMBOL start_clock_seconds = ($clock_secs)


! Set the gif filename, changing it from .gif to the name from this request
GO LAS_reset_gifname

! Initialize the region and data.

DEFINE SYMBOL data_initialization_script = Trajectory_initialize_data_insitu
DEFINE SYMBOL data_initialization_script = feature_initialize_data_insitu

! DEFINE SYMBOL ferret_label = 0

SET MODE verify:always  ! allows for debugging

DEFINE SYMBOL its_insitu = 1
DEFINE SYMBOL its_trajectory_map = 1
GO LAS_initialize_region 0

IF ($data_0_var"0|vid>1|*>0")  THEN
   DEFINE SYMBOL ferret_by_id = 1
   USE "($data_0_url)"
   LET varnames = ..varnames

   DEFINE SYMBOL data_0_var = `varnames[i=1]`
   CANCEL DATA "($data_0_url)"
ENDIF
GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Set the URL label for the first dataset.
GO LAS_url_label 0

! For the annotations
DEFINE SYMBOL ngood_data = `($data_var)[i=@NGD]`
DEFINE SYMBOL nbad_data = `($data_var)[i=@NBD]`

IF `STRINDEX("($ferret_view"0")", "x") GT 0` THEN

  IF ($rowvar"0|*>1") THEN 

! DSG file. Do decimation if there are over num_decimate points.

     LET decimate_size = ($ngood_data)
     LET num_decimate = 200000

SAY _________________ Starting decimate  on ($ngood_data) clock seconds:   ($clock_secs)
     DEFINE SYMBOL  data_x_is_lon = 1
   
     LET full_range = 360*90
     LET max_range = ($region_x_range)* ($region_y_range)
     LET max_range = MAX(($region_x_range), ($region_y_range))

      DEFINE SYMBOL  data_x_is_lon = 1
!      LET tol1 = `(max_range/full_range)/LOG(decimate_size)`
      LET tol1 = `(max_range/full_range)`
      IF `tol1 LT 1.e-6` THEN LET tol1 = 1.e-6
      LET tol2 = `tol1`


! Tolerances 10% of the data range over the approx pixel width of a plot.

      LET tol1 = 0.1*($region_x_range)/200
      IF `tol1 LT 1.e-6` THEN LET tol1 = 1.e-6

      LET tol2 = 0.1*($region_y_range)/200
      IF `tol2 LT 1.e-6` THEN LET tol2 = 1.e-6

     GO decimate_dsg `num_decimate` `tol1` `tol2`  ! variable tolerance computed in the decimate script
     
  ELSE
     LET nout_lonlat = `var_data_masked[i=@ngd]`
     DEFINE SYMBOL nout_lonlat = `nout_lonlat` 
  ENDIF
SAY _________________ After decimate clock seconds:   ($clock_secs)

  LET/UNITS=degrees_east x_var_data = ($data_x_var)
  IF `($nodata"0|*>1") EQ 0` THEN
     STAT x_var_data
  ELSE
     DEFINE SYMBOL stat_min ($region_x_lo)
  ENDIF

  IF ($data_y_var"0|*>1") THEN LET/UNITS=degrees_north y_var_data = ($data_y_var)
  IF ($data_z_var"0|*>1") THEN LET z_var_data = ($data_z_var)
  IF ($data_t_var"0|*>1") THEN LET t_var_data = ($data_t_var)
  LET var_data = ($data_var)
  DEFINE SYMBOL var_data = ($data_var)

ENDIF

! Special color-by-time key
IF ($ferret_plot_key"0|date_key>1|*>0") THEN 

! In this case we set up a time axis, and label the color key with dates
! If the units are seconds since, we don't need that much resolution for this. Make it hours.

   LET tmin = ($data_var)[i=@MIN]
   LET tmax = ($data_var)[i=@MAX]

   LET since_loc = STRINDEX("`($data_t_var).units`","since") - 2
   IF `since_loc GT 1` THEN 
      LET tunits = SUBSTRING("`($data_t_var).units`",1,`since_loc`)
      DEFINE SYMBOL tunits = `tunits`
   ENDIF
   DEFINE AXIS/T=`tmin`:`tmax`:1/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis 
   IF ($tunits"0|seconds>1|*>0") THEN \
   DEFINE AXIS/T=`tmin`:`tmax`:3600/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis 
   DEFINE SYMBOL datekey = 1

   DEFINE SYMBOL ferret_key_annotate = 0

   LET ttvar = t[gt=time_axis]
   DEFINE SYMBOL datekey_time_arg = ttvar

   DEFINE SYMBOL ferret_plot_levels = 30

ENDIF

IF ($ferret_by_id"0|*>1") THEN
   DEFINE SYMBOL ferret_palette = more_by_levels
   DEFINE SYMBOL ferret_plot_levels = `($rowvar),RETURN=lsize`
   LET id_data = COMPRESSI(XSEQUENCE(TRANSPOSE_XZ(id_by_z)))
   LET var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL ferret_plot_title Colored by Trajectory Number
ENDIF

! Set color levels
GO LAS_initialize_var_levels

! Hack for SOCAT: if its fco2 and there are huge values, set to a standard set...

IF `STRINDEX("($ferret_plot_var)", "fCO2") GT 0` THEN 
   IF `($ferret_plot_var)[i=@max] GT 600` THEN \
     DEFINE SYMBOL ferret_fill_levels = (-inf)(240,300,20)(300,405,5)(400,460,20)(inf)
ENDIF

! Plot qualifiers (graticule lines etc)
GO LAS_set_plot_qualifiers

! Open the window
GO LAS_open_window

SAY _________________ Before land underlay clock seconds:   ($clock_secs)

! Create the blank plot with bathymetries,
! coastlines, EEZ's, etc.

DEFINE SYMBOL basemap_palette = grayscale
DEFINE SYMBOL basemap_levels = (-inf)(-10000,-1000,1000)(-1000,0,100)
GO LAS_XY_overlay_basemap

PPL SHASET PROTECT

! Note argument 1 is ignored by Jons_fland.jnl. It determines the resoultion itself.
!  GO Jons_fland 20 black
!  GO Jons_fland 20 navy
!  GO Jons_fland 20 brown_dark

GO Jons_fland 20 green_deep
PPL SHASET PROTECT
SAY _________________ After land underlay clock seconds:   ($clock_secs)

! Turn on annotate_key, which persists until turned off
! (unless key_annoatate property tells us otherwise).

IF ($ferret_key_annotate"1|0|1|*>1") THEN
   KEYMARK 1
ELSE
   KEYMARK 0
ENDIF

! Define plot qualifiers for polygon overlay

!CANCEL SYMBOL qualifiers 
DEFINE SYMBOL qualifiers = ($qualifiers)/OVER/NOLAB

! If undefined, set polygon scale according to number of points
IF ($ferret_poly_scale"1|*>0") THEN
   GO LAS_set_poly_scale
   DEFINE SYMBOL ferret_poly_scale 0.5*($ferret_poly_scale)
ENDIF

! Color key for the variable values.
! If there is no plot variable defined (only plotting locations),
! do not plot the key.

IF ($ferret_plot_var"1|*>0") THEN DEFINE SYMBOL ferret_plot_key = 0

IF ($ferret_plot_key"1|0|1|nokey>0|*>1") THEN
   DEFINE SYMBOL qualifiers = ($qualifiers)/KEY
ELSE
   DEFINE SYMBOL qualifiers = ($qualifiers)/NOKEY
ENDIF

! Ribbon plot
DEFINE SYMBOL plot_command = PLOT/VS/RIBBON/LINE($qualifiers)
IF `nout_lonlat LT 50000` THEN DEFINE SYMBOL plot_command = ($plot_command)/THICK

! Points will mark location of missing data if needed
! Use color=1 for black...
LET missing_flag = -9999999
LET/UNITS=degrees_east  x_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN x_var_data 
LET/UNITS=degrees_north y_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN y_var_data 

! Set up for polygon overlay plot

DEFINE SYMBOL do_icons = 0
IF ($data_var"0|metadata_ID>1|($feature_variable)>1|*>0") THEN
   IF (ntrajs LE ($traj_max_labels)) THEN
      GO Trajectory_map_icons
      DEFINE SYMBOL do_icons = 1
   ENDIF

ELSE

   ! Set the palette
   ! If there is no variable, only locations, and if a palette is not 
   ! defined by ferret_palette, use black.

   IF ($ferret_plot_var"0|*>1") THEN
      DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"rainbow|default>rainbow|*>*")
   ELSE
      DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"black|default>black|*>*")/NOKEY
   ENDIF

   ! Draw the ribbon plot
   ($plot_command)($qualifiers)/missing=black/SET x_var_data, y_var_data, var_data 
      IF ($ferret_annotations%0|*>1%) THEN GO key_at_top
   PPL RIBBON/OVER

ENDIF

IF ($ferret_plot_var"0|*>1") THEN
   LET data_range = minmax(var_data)
   DEFINE SYMBOL data_plotted_min = `data_range[i=1],prec=7`
   DEFINE SYMBOL data_plotted_max = `data_range[i=2],prec=7`
ENDIF

SAY _________________ After RIBBON plot clock seconds:   ($clock_secs)

! Set the shape to what is used above it will be the same on the key
DEFINE SYMBOL ferret_poly_shape = ($ferret_poly_shape%square|delta|triangle|diamond|pentagon|hexagon|circle|star|plus|ex|*>square%)

! Add labels; unless all labels have been turned off

IF `($ferret_label"1|0|1|*>1") EQ 1` THEN
   
   ! Add the plot title on the bottom
   ! Nudge things down a little for 'yt and 'zt views because the time axis
   ! has years labeled beneath the months.
   
   IF `($ferret_annotations"0|*>1") EQ 0` THEN
      IF ($ferret_view"0|yt>1|zt>1|*>0") THEN
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.6*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ELSE
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.5*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ENDIF
   ENDIF
   
   IF ($t_lab_lo"0|*>1") THEN
      DEFINE SYMBOL n_left_labels `($n_left_labels"0") + 1`
      DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo)
      IF ($t_lab_hi"0|*>1") THEN DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo) to ($t_lab_hi)
      DEFINE SYMBOL time_lab ($upper_left_($n_left_labels))
   ENDIF

ENDIF ! ferret_label

! Add labels at the top for the dataset name etc if they exist  

GO labels_above_plot

! Add any constraint labels in the lower left, or as annotation notes.
! (The constraints themselves are handled in the data request from ERDDAP.
!  We do not need masking for constraints in map plots.)

IF `($ferret_annotations%0|*>1%)` THEN

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
         DEFINE SYMBOL note_num = `($note_num"0") + 1`; \
         DEFINE SYMBOL note_($note_num)_lab = ($mask_title_($mmask)); \
      ENDIF)
ELSE

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   DEFINE SYMBOL label_x = `-0.95*($ppl$xorg)`
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
        LABEL/NOUSER `($label_x)`, `($label_y)`, -1, 0, 0.12, ($mask_title_($mmask)) ; \
        DEFINE SYMBOL label_y = `($label_y) - 0.2`; \
      ENDIF)
ENDIF

! Add cruise information on the top
!GO Trajectory_label_cruise_pts
GO feature_labels

! if constraints are shown via constraint_0_lhs etc, define labels for those
GO set_constraint_labels

! restore key-annotation setting: keys not annotated
KEYMARK 0

! Save the results

IF `($do_icons) AND ($result_webrowset_filename"0|*>1")` THEN  GO feature_key

GO LAS_results box

! End of file ------------Trajectory_2D_poly.jnl--------------------------

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SAY _________________ exiting Trajectory_2D_poly.jnl product script: 

   SAY _________________ Start clock seconds: ($start_clock_seconds)
   SAY _________________ End clock seconds:   ($clock_secs)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
