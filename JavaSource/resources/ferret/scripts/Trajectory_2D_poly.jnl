!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! $Header$
! Trajectory_2D_poly.jnl
!
! Creates a 2D plot with a blank 'basemap' and an overlay of points
! colored by the ($ferret_plot_var) defined in LAS_initialize_data_insitu.
!
! 1/2010 acm - For Cruise ID, thin out the icons which are too dense to see well.
!              leave a thin dotted line at the original density
!              add to the title, "from data sampled every xxx"
!
! Set the gif filename, changing it from .gif to the name from this request
GO LAS_reset_gifname

! Initialize the region and data.

DEFINE SYMBOL data_initialization_script = Trajectory_initialize_data_insitu

! DEFINE SYMBOL ferret_label = 0

SET MODE verify:always  ! allows for debugging

DEFINE SYMBOL ribbon = 1

DEFINE SYMBOL its_insitu = 1
DEFINE SYMBOL its_trajectory_map = 1
GO LAS_initialize_region 0

IF ($data_0_var"0|vid>1|*>0")  THEN
   DEFINE SYMBOL ferret_by_id = 1
   USE "($data_0_url)"
   LET varnames = ..varnames

   DEFINE SYMBOL data_0_var = `varnames[i=1]`
   CANCEL DATA "($data_0_url)"
ENDIF
GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Set the URL label for the first dataset.
GO LAS_url_label 0

! Create the trajectory variables and symbols

GO LAS_initialize_traj_id

! Apply any constraints

LET xvar = ($ferret_plot_var)
LET nx_var = `($ferret_plot_var),return=isize`

LET var_mask = 1+0*x[gx=xvar,i=1:`nx_var`]
let subset_mask = 1
LET text_mask = 1
LET ntext_masks = 0

IF ($constraint_0_lhs"0|*>1) THEN
   GO prop_prop_constraints
ENDIF

LET constraints_mask = var_mask* text_mask
LET constraints_mask1 = var_mask* text_mask

! Apply the constraints mask

LET var_data_masked = constraints_mask * ($data_var)
DEFINE SYMBOL data_var = var_data_masked

! For the annotations
DEFINE SYMBOL ngood_data = `($data_var)[i=@NGD]`
DEFINE SYMBOL nbad_data = `($data_var)[i=@NBD]`

! If the variable is TIME then  symbols are
!  DATA_VAR = "coord_time", DATA_T_VAR = "hours_1970"  ??
! 
! In this case we can set up a time axis, and call polymark_datekey 

! When the data crosses the branch cut, replicate the lon,lat,var variables 
! with lon+360 or lon-360 and replicate latitudes, mask, and color-by variable

IF `STRINDEX("($ferret_view"0")", "x") GT 0` THEN

  

  IF ($rowvar"0|*>1") THEN 
     GO decimate_dsg
  ELSE
     LET nout_lonlat = `var_data_masked[i=@ngd]`
     DEFINE SYMBOL nout_lonlat = `nout_lonlat` 
  ENDIF

  LET/UNITS=degrees_east x_var_data = ($data_x_var)
!  LET/UNITS=degrees_east x_var_data = IF ($data_x_var) LT 0 then ($data_x_var)+360 else ($data_x_var)
  IF `($nodata"0|*>1") EQ 0` THEN
     STAT x_var_data
  ELSE
     DEFINE SYMBOL stat_min ($region_x_lo)
  ENDIF

  IF ($data_y_var"0|*>1") THEN LET/UNITS=degrees_north y_var_data = ($data_y_var)
  IF ($data_z_var"0|*>1") THEN LET z_var_data = ($data_z_var)
  IF ($data_t_var"0|*>1") THEN LET t_var_data = ($data_t_var)
  LET var_data = ($data_var)
  DEFINE SYMBOL var_data = ($data_var)

  IF `($STAT_MIN) LT ($REGION_X_LO)` THEN
    DEFINE SYMBOL do_wrap = 360
    LET/UNITS=degrees_east x_var_data_wrap = x_var_data + ($do_wrap)
  ENDIF

  IF `($REGION_X_HI) LT ($STAT_MAX)` THEN
    DEFINE SYMBOL do_wrap = -360
    LET/UNITS=degrees_east x_var_data_wrap = x_var_data + (($do_wrap))
  ENDIF

ENDIF

IF ($ferret_plot_key"0|date_key>1|*>0") THEN

   LET tmin = ($data_t_var)[i=@MIN]
   LET tmax = ($data_t_var)[i=@MAX]

   LET since_loc = STRINDEX("`($data_t_var).units`","since") - 2
   IF `since_loc GT 1` THEN
      LET tunits = SUBSTRING("`($data_t_var).units`",1,`since_loc`)
      DEFINE SYMBOL tunits = `tunits`
   ENDIF
   DEFINE AXIS/T=`tmin`:`tmax`:1/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis 
   DEFINE SYMBOL polymark_script = polymark_datekey

! Define time variable for last arg.
! yes?  GO polymark_datekey polygon_command xpts ypts [values] [shape] [scale] timevar

   LET ttvar = t[gt=time_axis]
   DEFINE SYMBOL datekey_time_arg = ttvar

   DEFINE SYMBOL margin = 1
   DEFINE SYMBOL ferret_poly_levels = 30

ENDIF

IF ($ferret_by_id"0|*>1") THEN
   DEFINE SYMBOL ferret_palette = more_by_levels
   DEFINE SYMBOL ferret_poly_levels = `($rowvar),RETURN=lsize`
   LET id_data = COMPRESSI(XSEQUENCE(TRANSPOSE_XZ(id_by_z)))
   LET var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL ferret_plot_title Colored by Trajectory Number
ENDIF

! Plot qualifiers (graticule lines etc)
GO LAS_set_plot_qualifiers 

! Open the window
GO LAS_open_window

! Create the blank plot with bathymetries,
! coastlines, EEZ's, etc.

DEFINE SYMBOL basemap_palette = grayscale
DEFINE SYMBOL basemap_levels = (-10000,-1000,1000)(-1000,0,100)
GO LAS_XY_overlay_basemap

PPL SHASET PROTECT

! Note argument 1 is ignored by Jons_fland.jnl. It determines the resoultion itself.
!  GO Jons_fland 20 black
!  GO Jons_fland 20 navy
!  GO Jons_fland 20 brown_dark

! GO Jons_fland 20 green_deep
PPL SHASET PROTECT

! Turn on annotate_key, which persists until turned off
! (unless key_annoatate property tells us otherwise).

IF ($ferret_key_annotate"1|0|1|*>1") THEN
   KEYMARK 1
ELSE
   KEYMARK 0
ENDIF

! Define plot qualifiers for polygon overlay

CANCEL SYMBOL qualifiers 
DEFINE SYMBOL qualifiers = /OVER/NOLAB

! If undefined, set polygon scale according to number of points
IF ($ferret_poly_scale"1|*>0") THEN
   GO LAS_set_poly_scale
   DEFINE SYMBOL ferret_poly_scale 0.5*($ferret_poly_scale)
ENDIF

! Color key for the variable values.
! If there is no plot variable defined (only plotting locations),
! do not plot the key.

IF ($ferret_plot_var"1|*>0") THEN DEFINE SYMBOL ferret_plot_key = 0

IF ($ferret_plot_key"1|0|1|nokey>0|*>1") THEN
   DEFINE SYMBOL qualifiers = ($qualifiers)/KEY
ELSE
   DEFINE SYMBOL qualifiers = ($qualifiers)/NOKEY
ENDIF

IF ($ferret_poly_levels"0|*>1") THEN
   DEFINE SYMBOL qualifiers = ($qualifiers)/LEVELS=($ferret_poly_levels)
ENDIF

IF ($ribbon"0|*>1") THEN
   DEFINE SYMBOL plot_command = PLOT/VS/RIBBON/LINE($qualifiers)
   IF `nout_lonlat LT 50000` THEN DEFINE SYMBOL plot_command = ($plot_command)/THICK
ELSE
   DEFINE SYMBOL plot_command = POLY
   IF `($ferret_poly_scale) GE 0.6` THEN DEFINE SYMBOL qualifiers = ($qualifiers)/LINE/FILL
ENDIF

! Make the polygon overlay plot

! Points will mark location of missing data
IF `($ribbon"0|*>1") EQ 0 AND ($has_missing"0")` THEN
   LET missing_flag = -9999999
   LET x_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN x_var_data 
   LET y_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN y_var_data 

! Use color=1 for black...
   PLOT/OVER/VS/NOLAB/SYM=2/COLOR=1/SIZ=0.02 x_loc_bad,y_loc_bad 
   IF ($do_wrap"0|*>1") THEN\
     PLOT/OVER/VS/NOLAB/SYM=2/COLOR=1/SIZ=0.02 x_loc_bad+(($do_wrap)),y_loc_bad 
ENDIF

   DEFINE SYMBOL do_icons = 0
   IF ($data_var"0|metadata_ID>1|($trajectory_variable)>1|*>0") THEN
   IF (ntrajs LE ($traj_max_labels)) THEN
      GO Trajectory_map_icons
      DEFINE SYMBOL do_icons = 1
   ENDIF

ELSE

   ! Set the palette
   ! If there is no variable, only locations, and if a palette is not 
   ! defined by ferret_palette, use black.

   IF ($ferret_plot_var"0|*>1") THEN
      DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"rainbow|default>rainbow|*>*")
   ELSE
      DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"black|default>black|*>*")/NOKEY
   ENDIF

   IF ($ribbon"0|*>1") THEN
      ($plot_command)($qualifiers)/missing=black/SET x_var_data, y_var_data, var_data 
         IF ($ferret_annotations%0|*>1%) THEN GO key_at_top
       PPL RIBBON/OVER

       IF ($do_wrap"0|*>1") THEN \
          ($plot_command)($qualifiers)/missing=black x_var_data+(($do_wrap)), y_var_data, var_data 
   ELSE

      LET ng = var_data[x=@ngd]
      IF `ng EQ 0` THEN DEFINE SYMBOL poly_command ($poly_command)/NOKEY
      DEFINE SYMBOL poly_command ($plot_command)($qualifiers)

      GO ($polymark_script"polymark") ($poly_command)/SET x_var_data y_var_data var_data ($ferret_poly_shape"square|triangle|delta|square|diamond|pentagon|hexagon|circle|star|plus|ex|*>square") ($ferret_poly_scale) ($datekey_time_arg)
      IF ($ferret_annotations%0|*>1%) THEN GO key_at_top

      PPL POLYGON/OVER
   ENDIF
ENDIF


GO Jons_fland 20 green_deep

! Set the shape to what is used above it will be the same on the key
DEFINE SYMBOL ferret_poly_shape = ($ferret_poly_shape%square|delta|triangle|diamond|pentagon|hexagon|circle|star|plus|ex|*>square%)

! Add labels; unless all labels have been turned off

IF `($ferret_label"1|0|1|*>1") EQ 1` THEN
   
   ! Add the plot title on the bottom
   ! Nudge things down a little for 'yt and 'zt views because the time axis
   ! has years labeled beneath the months.
   
   IF `($ferret_annotations"0|*>1") EQ 0` THEN
      IF ($ferret_view"0|yt>1|zt>1|*>0") THEN
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.6*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ELSE
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.5*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ENDIF
   ENDIF
   
   IF ($t_lab_lo"0|*>1") THEN
      DEFINE SYMBOL n_left_labels `($n_left_labels"0") + 1`
      DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo)
      IF ($t_lab_hi"0|*>1") THEN DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo) to ($t_lab_hi)
      DEFINE SYMBOL time_lab ($upper_left_($n_left_labels))
   ENDIF

ENDIF ! ferret_label

! Add labels at the top for the dataset name etc if they exist  

GO labels_above_plot


! Add any constraint labels in the lower left, or as annotation notes.
IF `($ferret_annotations%0|*>1%)` THEN

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
         DEFINE SYMBOL note_num = `($note_num"0") + 1`; \
         DEFINE SYMBOL note_($note_num)_lab = ($mask_title_($mmask)); \
      ENDIF)
ELSE

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   DEFINE SYMBOL label_x = `-0.95*($ppl$xorg)`
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
        LABEL/NOUSER `($label_x)`, `($label_y)`, -1, 0, 0.12, ($mask_title_($mmask)) ; \
        DEFINE SYMBOL label_y = `($label_y) - 0.2`; \
      ENDIF)
ENDIF

! Add cruise information on the top
GO Trajectory_label_cruise_pts

! if constraints are shown via constraint_0_lhs etc, define labels for those
GO set_constraint_labels

! restore key-annotation setting: keys not annotated
KEYMARK 0

! Save the results

IF `($do_icons) AND ($result_webrowset_filename"0|*>1")` THEN  GO Trajectory_cruise_key

GO LAS_results box

! End of file ------------Trajectory_2D_poly.jnl--------------------------
