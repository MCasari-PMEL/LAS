! LAS_set_strides.jnl
! ACM

! From the region and the grid we can define striding. Compute strides 
! based first on Ferret memory and then if it is a graphics product, on 
! pixel size. 
! ACM 8/312/2007 Do not issue the SET AXIS/STRIDE= command if the stride is 1
!                This partially works around TRAC #224.
! ACM 3/2008  If the transform-to-1-season per year has been set then do not 
!             stride in t

! TODO: When there's going to be a transformation or something, then these 
! calculations may not be sufficient. Might be better done by the transform script.

! If the operation is writing a netCDF file, that is done in chunks. Do not use strides

IF `STRINDEX( "($operation_ID)", "Data_Extract_netCDF" ) NE 0` THEN EXIT/SCRIPT

! See LAS_set_strides_curvilinear for first cut on dealing with strides and curvi data.
IF ($ferret_curvi_coord_lat"0|0|*>1") THEN EXIT/SCRIPT

! Hybrid Z not dealt with here...

IF ($do_hybrid_z"0|0|1|*>1") THEN EXIT/SCRIPT 


! Step 1  ---------------------------------------------------------------------
! Determine striding based on the memory allocation

DEFINE SYMBOL memsize = ($FERRET_MEMORY"6.4")* 1.e6

DEFINE SYMBOL nvars = ($data_count)

! If ($data_count) larger than 1 add the size of the variables.
LET pvar = ($ferret_plot_var) 
DEFINE SYMBOL var_size = ($var_size"0") + `pvar,RETURN=size`

! The exception to the above is side-by-side plots; each var loaded separately
IF `STRINDEX( "($operation_ID)", "Side" ) NE 0` THEN 
  DEFINE SYMBOL var_size = `pvar,RETURN=size`
  LET nvars = 1
ENDIF

IF `($num)+1 EQ ($nvars)` THEN
   LET varsiz `pvar,RETURN=size`
   DEFINE SYMBOL stride_for_mem = `INT( 1+ varsiz/(.5*($memsize)) )`

ENDIF

! If not a graphics product, apply the strides

IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0` THEN
   IF `($stride_for_mem"0") GT 1` THEN
      IF `($region_x_range"0") GT 0 AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=xaxis`
         DEFINE SYMBOL add_to_title = Stride ($stride_for_mem) in X
      ENDIF
      IF `($region_y_range"0") GT 0 AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=yaxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Y
      ENDIF
      IF `($region_z_range"0") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=zaxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Z
      ENDIF
      IF `($region_t"0") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=taxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in T
      ENDIF
      SET VAR/TITLE="($ferret_plot_title) ($add_to_title)" ($ferret_plot_var) 

   ENDIF
   EXIT/SCRIPT
ENDIF

! Step 2  ---------------------------------------------------------------------
! Now for graphics products, do striding by pixel size, often larger stride than
! needed to fit in Ferret memory


LET maxpix = 600  ! default
IF ($ferret_size"0|0.06667>1|*>0") THEN LET maxpix = 300  ! small
IF ($ferret_size"0|0.25>1|*>0")    THEN LET maxpix = 500  ! medium
IF ($ferret_size"0|0.5>1|*>0")     THEN LET maxpix = 600  ! default
IF ($ferret_size"0|0.8333>1|*>0")  THEN LET maxpix = 700  ! large

IF `($ferret_google_plot"0|0|*>1")` THEN LET  maxpix = `2*maxpix`

! For 2D plots
IF `STRLEN("($ferret_view)") EQ 2` THEN

! XY plot
IF ($ferret_view"|xy>1|*>0") THEN 
   
   IF `($region_x_range"0|0|*>1") AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
      LET xx = x[gx=($data_var)[d=($data_num)]]
      LET nx = xx[i=@ngd]
      LET x_pct = ($region_x_range)/360
      LET pixsize = `nx*x_pct`
!      LET pixsize = `MAX(pixsize, nx)`

      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
      IF `($xstride) GT 1` THEN SET AXIS/STRIDE=($xstride) `($data_var)[d=($data_num)],RETURN=xaxis`
   ENDIF

   IF `($region_y_range"0|0|*>1") AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
      LET yy = y[gy=($data_var)[d=($data_num)]]
      LET ny = yy[j=@ngd]
      LET y_pct = ($region_y_range)/180
      LET pixsize = `ny*y_pct`

!      LET pixsize = `MAX(pixsize, ny)`

      IF `pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`
      IF `($ystride) GT 1` THEN SET AXIS/STRIDE=($ystride) `($data_var)[d=($data_num)],RETURN=yaxis`
   ENDIF

! Other views than xy

ELSE
   LET pixsize = 1  ! initialize 

   IF `(STRINDEX("($ferret_view)", "x") GT 0) AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
      LET xx = x[gx=($data_var)[d=($data_num)]]
      LET nx = xx[i=@ngd]
      LET x_pct = ($region_x_range)/360
      LET pixsize = `nx*x_pct`
      LET pixsize = `MAX(pixsize, nx)`  ! comment this out to set strides by region
  
      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
      IF `($xstride) GT 1` THEN SET AXIS/STRIDE=($xstride) `($data_var)[d=($data_num)],RETURN=xaxis`
   ENDIF
  
   IF `(STRINDEX("($ferret_view)", "y") GT 0) AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
      LET yy = y[gy=($data_var)[d=($data_num)]]
      LET ny = yy[j=@ngd]
      LET y_pct = ($region_y_range)/180
      LET pixsize = `ny*y_pct`
      LET pixsize = `MAX(pixsize, ny)`  ! comment this out to set strides by region
  
      IF `pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`
      IF `($ystride) GT 1` THEN SET AXIS/STRIDE=($ystride) `($data_var)[d=($data_num)],RETURN=yaxis`
   ENDIF
  
   IF ($region_z_range"0|0|*>1") THEN 
      LET zz = z[gz=($data_var)[d=($data_num)],($region_z)]
      LET nz = zz[k=@ngd]
      LET pixsize = `MAX(pixsize, nz)`
      IF `nz GT maxpix` THEN DEFINE SYMBOL zstride = `INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL zstride = `MAX(($zstride"1"), ($stride_for_mem"1"))`
      IF `($zstride) GT 1` THEN SET AXIS/STRIDE=($zstride) `($data_var)[d=($data_num)],RETURN=zaxis`
   ENDIF
        
   IF `($region_t"0|0|*>1") AND ( ($DO_TRANS_1_SEAS_PER_YEAR"0") EQ 0) ` THEN     
      LET nt = tt[l=@ngd]
      LET tt = t[gt=($data_var)[d=($data_num)],($region_t)]
      LET pixsize = `MAX(pixsize, nt)`      
      DEFINE SYMBOL tstride = `INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL tstride = `MAX(($tstride"1"), ($stride_for_mem"1"))`
      IF `($tstride) GT 1` THEN SET AXIS/STRIDE=($tstride) `($data_var)[d=($data_num)],RETURN=taxis`
   ENDIF

ENDIF ! xy or not
ENDIF  ! 2D plots

! For 1D plots

IF `STRLEN("($ferret_view)") EQ 1` THEN

   LET pixsize = 1
   IF ($region_x_range"0|0|*>1") THEN 
      LET xx = x[gx=($data_var)[d=($data_num)],($region_x)]
      LET nx = xx[i=@ngd]
!      LET pixsize = `MAX(pixsize, nx)`
      LET x_pct = ($region_x_range)/360
      LET pixsize = `nx*x_pct`
   ENDIF
   IF ($region_y_range"0|0|*>1") THEN 
      LET yy = y[gy=($data_var)[d=($data_num)],($region_y)]
      LET ny = yy[j=@ngd]
!      LET pixsize = `MAX(pixsize, ny)`
      LET y_pct = ($region_y_range)/180
      LET pixsize = `ny*y_pct`
   ENDIF
   IF ($region_z_range"0|0|*>1") THEN 
      LET zz = z[gz=($data_var)[d=($data_num)],($region_z)]
      LET nz = zz[k=@ngd]
      LET pixsize = `MAX(pixsize, nz)`
   ENDIF
   IF ($region_t"0|0|*>1") THEN 
      LET nt = tt[l=@ngd]
      LET tt = t[gt=($data_var)[d=($data_num)],($region_t)]
      LET pixsize = `MAX(pixsize, nt)`
   ENDIF

   IF `pixsize GT maxpix` THEN

      IF `($region_x_range"0|0|*>1")  AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
         IF `nx GT maxpix` THEN 
            DEFINE SYMBOL xstride = `2*INT((nx/maxpix)+1)`
            IF `($xstride) GT 1` THEN SET AXIS/STRIDE=($xstride) `($data_var)[d=($data_num)],RETURN=xaxis`
         ENDIF
      ENDIF

      IF `($region_y_range"0|0|*>1") AND ($no_native_strides_xy"0|*>1") NE 1` THEN 
         IF `ny GT maxpix` THEN 
            DEFINE SYMBOL ystride = `2*INT((ny/maxpix)+1)`
            IF `($ystride) GT 1` THEN SET AXIS/STRIDE=($ystride) `($data_var)[d=($data_num)],RETURN=yaxis`
         ENDIF
      ENDIF

      IF ($region_z_range"0|0|*>1") THEN  
         IF `nz GT maxpix` THEN 
            DEFINE SYMBOL zstride = `2*INT((nz/maxpix)+1)
            IF `($zstride) GT 1` THEN SET AXIS/STRIDE=($zstride) `($data_var)[d=($data_num)],RETURN=zaxis`
         ENDIF
      ENDIF

      IF `($region_t"0|0|*>1") AND ( ($DO_TRANS_1_SEAS_PER_YEAR"0") EQ 0) ` THEN  
         IF `nt GT maxpix` THEN 
            DEFINE SYMBOL tstride = `2*INT((nt/maxpix)+1)`
            IF `($tstride) GT 1` THEN SET AXIS/STRIDE=($tstride) `($data_var)[d=($data_num)],RETURN=taxis`
         ENDIF
      ENDIF

   ENDIF

ENDIF ! 1D plots

! Add a label about the striding at the upper left.

LET need_comma = 0
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN

   DEFINE SYMBOL n_left_labels = `($n_left_labels"0")+1`
   DEFINE SYMBOL upper_left_($n_left_labels) = Strided 

   IF `($xstride"0|1>0|*>1")` THEN 
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($xstride) in X
      LET need_comma = 1
   ENDIF

   IF `($ystride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($ystride) in Y
      LET need_comma = 1
   ENDIF

   IF `($zstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($zstride) in Z
      LET need_comma = 1
   ENDIF

   IF `($tstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($tstride) in T
      LET need_comma = 1
   ENDIF

ENDIF

! End of $RCSfile ------------LAS_set_strides.jnl--------------------------
