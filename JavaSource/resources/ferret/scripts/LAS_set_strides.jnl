! LAS_set_strides.jnl
! ACM

! From the region and the grid we can define striding. Compute strides 
! based first on Ferret memory and then if it is a graphics product, on 
! pixel size. 
! ACM 8/312/2007 Do not issue the SET AXIS/STRIDE= command if the stride is 1
!                This partially works around TRAC #224.
! ACM 3/2008  If the transform-to-1-season per year has been set then do not 
!             stride in t
! ACM 4/2008  For descriptor data or for data whose axes are replaced cant
!             do native strides. In these cases set up index strides with
!             a call to LAS_set_strides_nonative
! 10-Jul-2008 ACM  Fixes for Google Earth placemark strides

! TODO: When there's going to be a transformation or something, then these 
! calculations may not be sufficient. Might be better done by the transform script.

! If the operation is writing a netCDF file, that is done in chunks. Do not use strides

IF `STRINDEX( "($operation_ID)", "Data_Extract" ) NE 0` THEN EXIT/SCRIPT

! See LAS_set_strides_curvilinear for first cut on dealing with strides and curvi data.
! If it is a native curvilinear plot then LAS_set_strides_curvilinear has been called.
IF ($ferret_curvi_coord_lat"0|0|*>1") THEN EXIT/SCRIPT

! Hybrid Z not dealt with here...

IF ($do_hybrid_z"0|0|1|*>1") THEN  EXIT/SCRIPT 

! ---------------------------------------------------------------------
! Determine striding based on the memory allocation

DEFINE SYMBOL memsize = ($FERRET_MEMORY"6.4")* 1.e6

! Cannot do native striding if this is a descriptor dataset, or if it is
! from a curvilienar dataset but working in the rectilinear portion. In 
! this case set up index strides.

DEFINE SYMBOL no_native = 0
DEFINE SYMBOL check_for_des =  `($data_var)[d=($data_num)],RETURN=dsetpath`
IF `STRINDEX("($check_for_des)", ".des") GT 0 OR ($no_native_strides_xy"0|*>1")` THEN 
   DEFINE SYMBOL no_native = 1
   LET pvar = ($data_var)[d=($data_num),($region_xyzt)]

   GO LAS_set_strides_nonative.jnl

   IF ($set_ndx_strides"0|*>1") THEN \
   DEFINE SYMBOL ferret_plot_var = ($data_var)[d=($data_num),($set_ndx_strides)]
   
   EXIT/SCRIPT
ENDIF

DEFINE SYMBOL nvars = ($data_count)

! If ($data_count) larger than 1 add the size of the variables.
LET pvar = ($ferret_plot_var) 
DEFINE SYMBOL var_size = ($var_size"0") + `pvar,RETURN=size`

! The exception to the above is side-by-side plots; each var loaded separately
IF `STRINDEX( "($operation_ID)", "Side" ) NE 0` THEN 
  DEFINE SYMBOL var_size = `pvar,RETURN=size`
  LET nvars = 1
ENDIF

IF `($num)+1 EQ ($nvars)` THEN
   LET varsiz `pvar,RETURN=size`
   DEFINE SYMBOL stride_for_mem = `INT( 1+ varsiz/(.5*($memsize)) )`

ENDIF

! If not a graphics product, apply the strides

IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "zoom" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "Anim" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "Grid_for_GE" ) EQ 0` THEN
   GO LAS_set_strides_for_mem
   
   EXIT/SCRIPT
ENDIF

! ---------------------------------------------------------------------
! Now for graphics or GE products, do striding by pixel size, often larger stride than
! needed to fit in Ferret memory

LET maxpix = 600  ! default
IF ($ferret_size"0|0.06667>1|*>0") THEN LET maxpix = 300  ! small
IF ($ferret_size"0|0.25>1|*>0")    THEN LET maxpix = 500  ! medium
IF ($ferret_size"0|0.5>1|*>0")     THEN LET maxpix = 600  ! default
IF ($ferret_size"0|0.8333>1|*>0")  THEN LET maxpix = 700  ! large

IF ($ferret_google_plot"0|*>1") THEN GO LAS_setup_strides_GE

IF `($region_x_range"0|0|*>1") AND ($no_native_strides_xy"0|*>1") NE 1` THEN 

   LET xx = x[gx=($data_var)[d=($data_num)]]  
   LET pixsize = `xx[($region_x)@ngd]` 
   IF ($ferret_google_plot"0|*>1") THEN
     IF `STRINDEX( "($operation_ID)", "Grid" ) NE 0` THEN
       LET nx = `xx[($region_x)@ngd]` !total no. of grid points in x axis, will be used by the Google Earth placemarks
     ENDIF
   ENDIF


   IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
   DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`

! Check whether X axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

   GO check_modulo_factor x 
   DEFINE SYMBOL axname = `($data_var)[d=($data_num)],RETURN=xaxis` 
   IF `STRINDEX("($axname)", "(") EQ 0` THEN
      IF `($xstride) GT 1 AND ($axis_stride_($axname)"0") EQ 0` THEN 
         SET AXIS/STRIDE=($xstride) ($axname)
         DEFINE SYMBOL axis_stride_($axname) = ($xstride)
      ENDIF
   ENDIF
ENDIF

IF `($region_y_range"0|0|*>1") AND ($no_native_strides_xy"0|*>1") NE 1` THEN 

   LET yy = y[gy=($data_var)[d=($data_num)]]
   LET pixsize = `yy[($region_y)@ngd]`
   IF ($ferret_google_plot"0|*>1") THEN
     IF `STRINDEX( "($operation_ID)", "Grid" ) NE 0` THEN
       LET ny = `yy[($region_y)@ngd]` !total no. of grid points in y axis, will be used by the Google Earth placemarks
     ENDIF
   ENDIF

   IF `pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
   DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`
   DEFINE SYMBOL axname = `($data_var)[d=($data_num)],RETURN=yaxis` 
   IF `STRINDEX("($axname)", "(") EQ 0` THEN
      IF `($ystride) GT 1 AND ($axis_stride_($axname)"0") EQ 0` THEN 
         SET AXIS/STRIDE=($ystride) ($axname)
         DEFINE SYMBOL axis_stride_($axname) = ($ystride)
      ENDIF
   ENDIF
ENDIF

IF ($region_z_range"0|0|*>1") THEN 
   LET zz = z[gz=($data_var)[d=($data_num)]]
   LET pixsize = `zz[($region_z)@ngd]`

   IF `pixsize GT maxpix` THEN DEFINE SYMBOL zstride = `INT((pixsize/maxpix)+1)`
   DEFINE SYMBOL zstride = `MAX(($zstride"1"), ($stride_for_mem"1"))`
   DEFINE SYMBOL axname = `($data_var)[d=($data_num)],RETURN=zaxis`
   IF `STRINDEX("($axname)", "(") EQ 0` THEN
      IF `($zstride) GT 1 AND ($axis_stride_($axname)"0") EQ 0` THEN 
         SET AXIS/STRIDE=($zstride) ($axname)
         DEFINE SYMBOL axis_stride_($axname) = ($zstride)
      ENDIF
   ENDIF
ENDIF

! If this is an animation then the time step is controlled by that. Do not do
! striding in time.
LET trange = STRCMP("($region_t_lo%0%)", "($region_t_hi%1%)")
IF `($region_t"0|0|*>1") AND ( ($DO_TRANS_1_SEAS_PER_YEAR"0") EQ 0) AND \
    trange NE 0 AND STRINDEX("($operation_ID)", "Animation_Frames") EQ 0 ` THEN
   LET tt = t[gt=($data_var)[d=($data_num)]]
   LET pixsize = `tt[($region_t)@ngd]`      
   DEFINE SYMBOL tstride = `INT((pixsize/maxpix)+1)`
   DEFINE SYMBOL tstride = `MAX(($tstride"1"), ($stride_for_mem"1"))`

! Check whether T axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

   GO check_modulo_factor t
   DEFINE SYMBOL axname = `($data_var)[d=($data_num)],RETURN=yaxis`
   IF `STRINDEX("($axname)", "(") EQ 0` THEN
      IF `($tstride) GT 1 AND ($axis_stride_($axname)"0") EQ 0` THEN 
         SET AXIS/STRIDE=($tstride) ($axname)
         DEFINE SYMBOL axis_stride_($axname) = ($tstride)
      ENDIF
   ENDIF
ENDIF

! Add a label about the striding at the upper left.

LET need_comma = 0
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN

   DEFINE SYMBOL n_left_labels = `($n_left_labels"0")+1`
   DEFINE SYMBOL upper_left_($n_left_labels) = Strided 

   IF `($xstride"0|1>0|*>1")` THEN 
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($xstride) in X
      LET need_comma = 1
   ENDIF

   IF `($ystride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($ystride) in Y
      LET need_comma = 1
   ENDIF

   IF `($zstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($zstride) in Z
      LET need_comma = 1
   ENDIF

   IF `($tstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($tstride) in T
      LET need_comma = 1
   ENDIF

ENDIF

! Set this for list_grid, GE placemarks
IF ($ferret_google_plot"0|*>1") THEN

  IF `STRINDEX( "($operation_ID)", "Grid" ) NE 0` THEN

!       DEFINE SYMBOL xstride_coord = `INT(360*($xstride"1")/nx)`
!       DEFINE SYMBOL ystride_coord = `INT(180*($ystride"1")/ny)`
!    ENDIF

! compute stride value for Google Earth placemarks, these values are different from the strides for plot
! the xycoord was set in LAS_setup_strides_GE.jnl
  IF ($region_x_lo"0|*>1") THEN
    cancel mode long
    cancel mode lat

    LET x_range = `($data_var),return=xend` - `($data_var),return=xstart` ! data range in x
    LET x_pct = ($region_x_range)/x_range                                 ! selected range over data range

    ! data's native resolution in x
    DEFINE SYMBOL data_xcoord = `xbox[gx=($data_var),x=($region_x_lo)]`

    IF `($region_x_range) LT 180` THEN
        DEFINE SYMBOL xstride_coord = `INT(x_pct*xycoord)` ! stride value in x
    ELSE
        DEFINE SYMBOL xstride_coord = `INT(1*xycoord)`     ! for range >= 180, use the same stride value
    ENDIF

    ! make sure xstride_coord is not less than the data's native resolution
    IF `($xstride_coord) LT ($data_xcoord)` THEN           ! stride value >= data resolution
       DEFINE SYMBOL xstride_coord = `($data_xcoord)`
    ENDIF

  ENDIF

  IF ($region_y_lo"0|*>1") THEN
    cancel mode long
    cancel mode lat

    LET y_range = `($data_var),return=yend` - `($data_var),return=ystart` ! data range in y
    LET y_pct = ($region_y_range)/y_range                                 ! selected range over data range

            
    ! data's native resolution in y
    DEFINE SYMBOL data_ycoord = `ybox[gy=($data_var),y=($region_y_lo)]`

    DEFINE SYMBOL ystride_coord = `INT(y_pct*xycoord)`   ! stride value in y

    ! make sure ystride_coord is not less than the data's native resolution
    IF `($ystride_coord) LT ($data_ycoord)` THEN         
        DEFINE SYMBOL ystride_coord = `($data_ycoord)`
    ENDIF

  ENDIF

ENDIF

! End of $RCSfile ------------LAS_set_strides.jnl--------------------------
