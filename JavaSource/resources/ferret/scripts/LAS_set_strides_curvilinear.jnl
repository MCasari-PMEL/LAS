! LAS_set_strides_curvilinear.jnl
!
! From the region and the grid we can define striding. When there's going to be
! a transformation or something, then this might be better someplace else, or
! might be undone by the transform script.


! cannot do native striding if this is a descriptor dataset. 

DEFINE SYMBOL check_for_des =  `($data_var)[d=($data_num)],return=dsetpath`
IF `STRINDEX("($check_for_des)", ".des") GT 0` THEN EXIT/SCRIPT


show symbol operation_id
IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "zoom" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "Anim" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "Grid_for_GE" ) EQ 0` THEN EXIT/SCRIPT

! If striding has already been set (e.g. for the other vector component) then exit
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN EXIT/SCRIPT

LET maxpix = 600  ! default
IF ($ferret_size"0|0.06667>1|*>0") THEN LET maxpix = 300  ! small
IF ($ferret_size"0|0.25>1|*>0")    THEN LET maxpix = 500  ! medium
IF ($ferret_size"0|0.5>1|*>0")     THEN LET maxpix = 600  ! default
IF ($ferret_size"0|0.8333>1|*>0")  THEN LET maxpix = 700  ! large

IF `($ferret_google_plot"0|*>1")` THEN 
    IF ($ferret_stride_quality_factor"0|1.0>1|*>0") THEN LET maxpix = 200  ! draft(fast)
    IF ($ferret_stride_quality_factor"0|0.5>1|*>0") THEN LET maxpix = 500  ! medium
    IF ($ferret_stride_quality_factor"0|0.0>1|*>0") THEN LET maxpix = 700  ! best(slow)
!LET  maxpix = `2*maxpix`
ENDIF

IF `($ferret_google_plot"0|*>1")` THEN GO LAS_setup_strides_GE

! Step 1  ---------------------------------------------------------------------
! Determine striding based on the memory allocation

DEFINE SYMBOL memsize = ($FERRET_MEMORY"6.4")* 1.e6

! If ($data_count) larger than 1 add the size of the variables.
!LET pvar = ($ferret_plot_var) 
LET pvar = ($data_var)[d=($data_num)]
IF ($region_zt"0|*>1") THEN LET pvar = ($data_var)[d=($data_num),($region_zt)]
IF ($clon_imin"0|*>1") THEN 
   LET pvar = ($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   IF ($region_zt"0|*>1") THEN \
      LET pvar = ($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax),($region_zt)]
ENDIF

LET varsiz `pvar,RETURN=size`

! If its a slice in x or y account for that
IF `($region_x_range"1|0|*>1") EQ 0 AND ($region_y_range"1|0|*>1") EQ 0` THEN
   LET pvar = ($data_var)[d=($data_num),($region_zt),i=1,j=1]
   LET varsiz = MIN(`varsiz`, `pvar,RETURN=size`)

ELIF `($region_x_range"1|0|*>1") EQ 0` THEN 
   LET pvar = ($data_var)[d=($data_num),($region_zt),i=1]
   LET varsiz = MIN(`varsiz`, `pvar,RETURN=size`)

ELIF `($region_y_range"1|0|*>1") EQ 0` THEN 
   LET pvar = ($data_var)[d=($data_num),($region_zt),j=1]
   LET varsiz = MIN(`varsiz`, `pvar,RETURN=size`)

ENDIF

DEFINE SYMBOL stride_for_mem = `INT( 1+ varsiz/(.1*($memsize)) )`

! If not a graphics product, apply the strides

IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "zoom" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "Anim" ) EQ 0 AND  \
    STRINDEX( "($operation_ID)", "_GE" ) EQ 0` THEN
   IF `($stride_for_mem"0") GT 1` THEN
      IF `($region_x_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=xaxis`
         DEFINE SYMBOL add_to_title = Stride ($stride_for_mem) in X
      ENDIF
      IF `($region_y_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=yaxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Y
      ENDIF
      IF `($region_z_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=zaxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Z
      ENDIF
      IF `($region_t"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=taxis`
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in T
      ENDIF
      SET VAR/TITLE="($ferret_plot_title) ($add_to_title)" ($ferret_plot_var) 

   ENDIF
   EXIT/SCRIPT
ENDIF

! Step 2  ---------------------------------------------------------------------
! Now for graphics products, do striding by pixel size, often larger stride than
! needed to fit in Ferret memory


LET xx = x[gx=($data_var)[d=($data_num)]]
LET nx = xx[i=@ngd]

! For 2D plots

IF `STRLEN("($ferret_view)") EQ 2` THEN

! curvilinear grid? Get percentage of total that the region represents, see
! if the number of points looks like it will be large.

! Curvilinear and XY plot

   IF `($ferret_curvi_coord_lat"0|*>1") + ($ferret_view"|xy>1|*>0") EQ 2 ` THEN 
   
      LET xx = x[gx=($data_var)[d=($data_num)]]
      LET nx = xx[i=@ngd]
      LET x_pct = ($region_x_range)/360
      LET pixsize = `nx*x_pct`
!         LET pixsize = `MAX(pixsize, nx)`  ! comment this out to set strides by region

!         IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
      IF `($xstride"0") GT 1` THEN 
! Check whether X axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

         GO check_modulo_factor x 

         LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
         DEFINE SYMBOL xoff = /OFFSET=`($xstride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
         SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
         DEFINE SYMBOL clon_imin = `MAX(1, INT(($clon_imin)/($xstride)) )`
         DEFINE SYMBOL clon_imax = `MIN (nx, INT(($clon_imax)/($xstride)) )`
            
      ENDIF

      LET yy = y[gy=($data_var)[d=($data_num)]]
      LET ny = yy[j=@ngd]
      LET y_pct = ($region_y_range)/180
      LET pixsize = `ny*y_pct`

!         LET pixsize = `MAX(pixsize, ny)`  ! comment this out to set strides by region

!         IF `pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      IF `2*pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`

      IF `($ystride"0") GT 1` THEN 
         LET rem = ( (($clat_jmin)/($ystride)) - int(($clat_jmin)/($ystride)) )* ($ystride)
         DEFINE SYMBOL yoff = /OFFSET=`($ystride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
         SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
         DEFINE SYMBOL clat_jmin = `MAX(1, INT(($clat_jmin)/($ystride)) )`
         DEFINE SYMBOL clat_jmax = `MIN(ny, INT(($clat_jmax)/($ystride)) )`

      ENDIF

! Curvilinear and some other view than xy

   ELIF `($ferret_curvi_coord_lat"0|*>1") AND (STRINDEX("($ferret_view)", "x") + STRINDEX("($ferret_view)", "y") GT 0) ` THEN

!        IF `(STRINDEX("($ferret_view)", "x") GT 0)` THEN 
           LET xx = x[gx=($data_var)[d=($data_num)]]
           LET nx = xx[i=@ngd]
           LET x_pct = ($region_x_range)/360
           LET pixsize = `nx*x_pct`
           LET pixsize = `MAX(pixsize, nx)`  ! comment this out to set strides by region
    
           IF `pixsize GT maxpix` THEN 
              DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
           ENDIF
           IF `($xstride"0") GT 1` THEN 
           
! Check whether X axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

              GO check_modulo_factor x 
              LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
              DEFINE SYMBOL xoff = /OFFSET=`($xstride) - rem`
              IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
              SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
              DEFINE SYMBOL clon_imin = `INT(($clon_imin)/($xstride))`
              DEFINE SYMBOL clon_imax = `INT(($clon_imax)/($xstride))`

           ENDIF

!        ENDIF
  
!        IF `(STRINDEX("($ferret_view)", "y") GT 0)` THEN 
           LET yy = y[gy=($data_var)[d=($data_num)]]
           LET ny = yy[j=@ngd]
           LET y_pct = ($region_y_range)/180
           LET pixsize = `ny*y_pct`
           LET pixsize = `MAX(pixsize, ny)`  ! comment this out to set strides by region
  
           IF `pixsize GT maxpix` THEN 
              DEFINE SYMBOL ystride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`
           ENDIF

           IF `($ystride"0") GT 1` THEN 
              DEFINE SYMBOL yoff = /OFFSET=`($ystride) - rem`
              IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
              SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
              DEFINE SYMBOL clat_jmin = `INT(($clat_jmin)/($ystride))`
              DEFINE SYMBOL clat_jmax = `INT(($clat_jmax)/($ystride))`
           ENDIF

!        ENDIF

        IF ($region_z_lo"0|*>1") THEN 
           LET zz = z[gz=($data_var)[d=($data_num)],($region_z)]
           LET nz = zz[k=@ngd]
           LET pixsize = `MAX(pixsize, nz)`

           IF `nz GT maxpix` THEN 
              DEFINE SYMBOL zstride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL zstride = `MAX(($zstride"1"), ($stride_for_mem"1"))`
           ENDIF
           IF `($zstride"0") GT 1` THEN SET AXIS/STRIDE=($zstride) `($data_var)[d=($data_num)],RETURN=zaxis`

        ENDIF
   
        IF ($region_t_lo"0|*>1") THEN     
           LET tt = t[gt=($data_var)[d=($data_num)],($region_t)]
           LET nt = `tt[l=@ngd]`
           stat tt
           LET pixsize = `MAX(pixsize, nt)`

           IF `nt GT maxpix` THEN 
              DEFINE SYMBOL tstride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL tstride = `MAX(($tstride"1"), ($stride_for_mem"1"))`
           ENDIF
           IF `($tstride"0") GT 1` THEN SET AXIS/STRIDE=($tstride) `($data_var)[d=($data_num)],RETURN=taxis`

        ENDIF

   ENDIF ! xy or not
ENDIF  ! 2D plots


! XY and a third dimension for Google Earth placemarks

IF `STRLEN("($ferret_view)") EQ 3 AND STRINDEX("($ferret_view)", "xy") GT 0` THEN

! Curvilinear and XY region. Apply the (very coarse) striding.

   IF `($ferret_curvi_coord_lat"0|*>1")` THEN 
   
      LET xx = x[gx=($data_var)[d=($data_num)]]
      LET nx = xx[i=@ngd]
      LET x_pct = ($region_x_range)/360
      LET pixsize = `nx*x_pct`

      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`

! Check whether X axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

      GO check_modulo_factor x 

      IF `($xstride"0") GT 1` THEN 
         LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
         DEFINE SYMBOL xoff = /OFFSET=`($xstride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
         SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
         DEFINE SYMBOL clon_imin = `INT(($clon_imin)/($xstride))`
         IF `($clon_imin) EQ 0` THEN DEFINE SYMBOL clon_imin = 1
         DEFINE SYMBOL clon_imax = `INT(($clon_imax)/($xstride))`
         IF `($clon_imax) EQ 0` THEN DEFINE SYMBOL clon_imax = 2
      ENDIF

      LET yy = y[gy=($data_var)[d=($data_num)]]
      LET ny = yy[j=@ngd]
      LET y_pct = ($region_y_range)/180
      LET pixsize = `ny*y_pct`

      IF `2*pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`

      IF `($ystride"0") GT 1` THEN 
         LET rem = ( (($clat_jmin)/($ystride)) - int(($clat_jmin)/($ystride)) )* ($ystride)
         DEFINE SYMBOL yoff = /OFFSET=`($ystride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
         SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
         DEFINE SYMBOL clat_jmin = `MAX(1, INT(($clat_jmin)/($ystride)) )`
         IF `($clat_jmin) EQ 0` THEN DEFINE SYMBOL clat_jmin = 1
         DEFINE SYMBOL clat_jmax = `MIN(ny, INT(($clat_jmax)/($ystride)) )`
         IF `($clat_jmax) EQ 0` THEN DEFINE SYMBOL clat_jmax = 2
      ENDIF

   ENDIF  ! ferret_curvi_coord_lat
ENDIF ! GE placemarks

! Add a label about the striding at the upper left.

LET need_comma = 0
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN

   DEFINE SYMBOL n_left_labels = `($n_left_labels"0|*>1")+1`
   DEFINE SYMBOL upper_left_($n_left_labels) = Strided 

   IF `($xstride"0|1>0|*>1")` THEN 
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($xstride) in X
      LET need_comma = 1
   ENDIF

   IF `($ystride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($ystride) in Y
      LET need_comma = 1
   ENDIF

   IF `($zstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($zstride) in Z
      LET need_comma = 1
   ENDIF

   IF `($tstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($tstride) in T
      LET need_comma = 1
   ENDIF

ENDIF

! Set this for list_grid

IF ($ferret_google_plot"0|*>1") THEN
   IF `STRINDEX( "($operation_ID)", "Grid" ) NE 0` THEN
      DEFINE SYMBOL xstride_coord = `360/nx`
      DEFINE SYMBOL ystride_coord = `180/ny`
      IF `($xstride"0") GT 1` THEN DEFINE SYMBOL xstride_coord = `360*($xstride)/nx`
      IF `($ystride"0") GT 1` THEN DEFINE SYMBOL ystride_coord = `180*($ystride)/ny`
   ENDIF
ENDIF

! End of $RCSfile ------------LAS_set_strides_curvilinear.jnl--------------------------
