! LAS_auto_levels_animate.jnl
! ACM 8/22/2007

! acm 9/11/07 If its a descriptor file Ferret wont allow striding. 
!             check for that case and just set num levels.

! Based on a variables value over its entire range, set strides
! if needed to quickly get stats on the variable. Use this to set levels.

! Argument: the variable to use in setting the levels.

! The symbol ferret_center_levels, if set to 1, forces the levels
! to be 2 std above and below zero. Otherwise use 2 std above 
! and below the data mean

! This script should be done BEFORE any other striding is done.
! It operates on the variable on its entire native unstrided grid.

! input_fill_levels and input_contour_levels are symbols that are defined in 
! LAS_initialize_variable.jnl, telling whether settings for levels were
! made 

! Determine striding for speed in operating the STAT command
LET memsize = 0.5* 1.e6

! Make sure its a 2D plot operation.

DEFINE SYMBOL op = `UPCASE("($operation_ID)")`

!IF `($ferret_view"|xy>1|*>0") NE 1` THEN EXIT/SCRIPT
IF `STRINDEX("($op)", "VECTOR") GT 0` THEN EXIT/SCRIPT

IF `STRINDEX("($op)", "ANIMATION") EQ 0` THEN EXIT/SCRIPT

! NOTE: animations have not been implemented for difference plots.
! If its a compare plot, and if the ($ferret_diff_var) is not yet defined, 
! just return.

IF `($ferret_diff_var"1|*>0") AND STRINDEX("($op)", "COMPARE_PLOT") NE 0` THEN  ! 1
   EXIT/SCRIPT
ENDIF  ! 1

DEFINE SYMBOL ferret_center_levels ($ferret_center_levels"0|1|TRUE>1|*>0")

! If levels were requested but not centered ones, just return.
IF ($input_fill_levels"0") THEN  ! 2
   DEFINE SYMBOL up_fill_levels = `UPCASE("($ferret_fill_levels)")`
   LET nc = `STRINDEX("($up_fill_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc EQ 0` THEN  ! 3
      IF `($ferret_contour_levels"0|*>1") EQ 0` THEN \
        DEFINE SYMBOL ferret_contour_levels ($ferret_fill_levels)     
      EXIT/SCRIPT
   ENDIF ! 3
ENDIF ! 2

! See if centered levels were requested, either by setting the symbol ferret_center_levels
! or with a contour_levels or fill_levels that is centered.

! If contour levels requested with levels of nC, e.g. 20C, then get the value to
! set num_fine_levels in the %RANGE command below

LET nc = 0
IF ($ferret_contour_levels"0|*>1") THEN ! 4
   DEFINE SYMBOL up_contour_levels = `UPCASE("($ferret_contour_levels)")`
   LET nc = `STRINDEX("($up_contour_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc GT 0` THEN ! 5
      LET slen = STRLEN ("($up_fill_levels)") 
      IF `slen GT 1` THEN DEFINE SYMBOL num_fine_levels = `SUBSTRING ("($up_fill_levels)", 1, slen-1)`
   ENDIF ! 5
ENDIF ! 4
IF ($ferret_fill_levels"0|*>1") THEN ! 6
   DEFINE SYMBOL up_fill_levels = `UPCASE("($ferret_fill_levels)")`
   LET nc = `STRINDEX("($up_fill_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc GT 0` THEN ! 7
      LET slen = STRLEN ("($up_fill_levels)") 
      IF `slen GT 1` THEN DEFINE SYMBOL num_fine_levels = `SUBSTRING ("($up_fill_levels)", 1, slen-1)`
   ENDIF ! 7
ENDIF ! 6
!! PUNT

! If levels other than centered were already given, exit
IF `nc EQ 0` THEN ! 8
  IF `($ferret_fill_levels"0|*>1") OR ($ferret_contour_levels"0|*>1")` THEN EXIT/SCRIPT
ENDIF ! 8

! Apply to the variable on the requested region in x, y, z and all time.
LET pvar = ($ferret_xyz_var)

! Not yet tested with curvilinear data.
IF ($ferret_plot_var"0|sampled_var>1|*>0) THEN LET pvar = ($ferret_plot_base_var)[region_xyz]
IF ($do_curvi_xy_and_hybrid_z"0") THEN LET pvar = plot_var

DEFINE SYMBOL have_pvar = 1

! cannot do native striding if this is a descriptor dataset. In that case
! just set the number of levels

DEFINE SYMBOL check_for_des =  `pvar,RETURN=dsetpath`
IF `STRINDEX("($check_for_des)", ".des") GT 0` THEN ! 10
   IF `($input_contour_levels"0|0|1") EQ 0` THEN \
     DEFINE SYMBOL ferret_fill_levels = ($num_fine_levels"30")
   IF `($input_contour_levels"0|0|1") EQ 0` THEN \
     DEFINE SYMBOL ferret_contour_levels = ($num_fine_levels"30")
   EXIT/SCRIPT
ENDIF ! 10

! If the ferret_diff_var has been defined, use it.
! When no levels are defined, use centered ones.

IF ($ferret_diff_var"0|*>1") THEN  ! 11

   IF `($input_contour_levels"0|0|1") EQ 0` THEN  ! 12
      CANCEL SYMBOL ferret_contour_levels
      DEFINE SYMBOL ferret_contour_levels = 20c
      DEFINE SYMBOL ferret_center_levels = 1
   ENDIF ! 12

   IF `($input_fill_levels"0|0|1") EQ 0` THEN  ! 13
      CANCEL SYMBOL ferret_fill_levels
      DEFINE SYMBOL ferret_fill_levels = 20c
      DEFINE SYMBOL ferret_center_levels = 1
   ENDIF ! 13
   LET pvar = ($ferret_diff_var)

ENDIF ! 11

LET var_size = ABS( `pvar,RETURN=size`)
DEFINE SYMBOL var_dim = `pvar,RETURN=shape`
LET ndims = STRLEN("($var_dim)")

LET stride_for_speed = `INT( 1+ ((var_size/memsize))/ndims )`

! If axes are not already strided, apply simple striding which
! we will undo later.
IF `stride_for_speed GT 1` THEN ! 14

   IF `($xstride"0|*>1") EQ 0` THEN ! 15
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=xaxis`
     DEFINE SYMBOL undo_x = 1
   ENDIF ! 15

   IF `($ystride"0|*>1") EQ 0` THEN  ! 16
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=yaxis`
     DEFINE SYMBOL undo_y = 1
   ENDIF ! 16

   IF `($tstride"0|*>1") EQ 0` THEN  ! 17
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=taxis`
     DEFINE SYMBOL undo_t = 1
   ENDIF ! 17

ENDIF ! 14

! If already strided, do index strides.

IF ($xstride"0|1>0|*>1") THEN ! 18
   LET xsize  `pvar,RETURN=isize`
   IF `xsize GT 50` THEN ! 19
     let strd_lo = `i[gx=pvar,x=($region_x_lo)]`
     let strd_hi = `i[gx=pvar,x=($region_x_hi)]`
     DEFINE SYMBOL index_strides = i=`strd_lo`:`strd_hi`:`INT(xsize/10)`
   ENDIF ! 19
ENDIF ! 18

IF ($ystride"0|1>0|*>1") THEN ! 20
   LET ysize  `pvar,RETURN=jsize`
   IF `ysize GT 50` THEN  ! 21
     let strd_lo = `j[gy=pvar,y=($region_y_lo)]`
     let strd_hi = `j[gy=pvar,y=($region_y_hi)]`
     IF ($index_strides"0|*>1") THEN  ! 22
        DEFINE SYMBOL index_strides = ($index_strides),j=`strd_lo`:`strd_hi`:`INT(ysize/10)`
     ELSE
        DEFINE SYMBOL index_strides = j=`strd_lo`:`strd_hi`:`INT(ysize/10)`
     ENDIF ! 22
   ENDIF ! 21
ENDIF ! 20

IF ($zstride"0|1>0|*>1") THEN  ! 23
   LET zsize  `pvar,RETURN=ksize`
   IF `zsize GT 50` THEN  ! 24
     let strd_lo = `k[gz=pvar,z=($region_z_lo)]`
     let strd_hi = `k[gz=pvar,z=($region_z_hi)]`
     IF ($index_strides"0|*>1") THEN  ! 25
        DEFINE SYMBOL index_strides = ($index_strides),k=`strd_lo`:`strd_hi`:`INT(zsize/10)`
     ELSE
        DEFINE SYMBOL index_strides = k=`strd_lo`:`strd_hi`:`INT(zsize/10)`
     ENDIF ! 25
   ENDIF ! 24
ENDIF ! 23

IF ($tstride"0|1>0|*>1") THEN  ! 26
   LET tsize  `pvar,RETURN=lsize`
   IF `tsize GT 50` THEN  ! 27
     IF ($index_strides"0|*>1") THEN  ! 28
        let strd_lo = `L[gt=pvar,t=($region_t_lo)]`
        let strd_hi = `L[gt=pvar,t=($region_t_hi)]`
        DEFINE SYMBOL index_strides = ($index_strides),`strd_lo`:`strd_hi`:`INT(tsize/10)`
     ELSE
        DEFINE SYMBOL  index_strides = `strd_lo`:`strd_hi`:`INT(tsize/10)`
     ENDIF ! 28
   ENDIF ! 27
ENDIF ! 26

IF ($index_strides"0|*>1") THEN  ! 29
   DEFINE SYMBOL ppvar = pvar[($index_strides)]
ELSE
   DEFINE SYMBOL ppvar = pvar
ENDIF ! 29

! Execute the stat command to load symbols with the variables
! mean, max, min, std.

STAT ($ppvar)

! Undo the striding. Other striding may be set elsewhere

IF `stride_for_speed GT 1` THEN ! 30
   IF `($undo_x"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=xaxis`
   IF `($undo_y"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=yaxis`
   IF `($undo_z"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=zaxis`
   IF `($undo_t"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=taxis`
ENDIF ! 30

IF `($stat_ngood"0") EQ 0` THEN EXIT/SCRIPT

! Compute rounded-off levels with the PPL %RANGE command.

!!!  Suggestions from Hankin
! Determine contour levels to use such that a fine density of levels is used within +/- 1 std dev
! and a coarse density is used out to +/- 2 std dev.
! The ratio of densities is density_factor = fine/coarse.

LET density_factor = 4
! fraction_that_are_fine = density_factor/(1+density_factor)

! This can happen if the data is a constant value...
IF `($stat_min) EQ ($stat_max)` THEN EXIT/SCRIPT

DEFINE SYMBOL num_fine_levels = `(density_factor/(1+density_factor)) * ($num_contour_levels"30")`
DEFINE SYMBOL num_coarse_levels =  `($num_contour_levels"30") - ($num_fine_levels)`
DEFINE SYMBOL half_num_coarse_levels = `($num_coarse_levels)/2`

! Compute rounded-off levels with the PPL %RANGE command.

LET nstd = 2*($stat_std)
LET nstd = 1*($stat_std)

IF ($stat_mean"bad>1|bad>1|*>0") THEN  ! 31
  DEFINE SYMBOL error_string "The ($data_var)[d=($data_num)] variable has no valid data"
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF ! 31

IF ($ferret_center_levels) THEN  ! 32
   GO LAS_centered_levels
ELSE
   GO LAS_non_centered_levels
ENDIF ! 32

! Use these levels to reset ferret_contour_levels and ferret_fill_levels 

IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_fill_levels = ($ferret_auto_levels)
IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_contour_levels = ($ferret_auto_lines)

! End of file ------------LAS_auto_levels_animate.jnl--------------------------

