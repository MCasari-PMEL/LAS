!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Timeseries_station_plot.jnl
! 
! Author: Ansley Manke
! Date: Nov 2014
!
! Plot sets of time series from a Discrete Sampling Geometries timeseries dataset
!

SET MODE verify:always  ! allows for debugging

! Set the gif filename, changing it from .gif to the name from this request
! Set up to write info to the debug log so that FshowGO can be used
GO LAS_initial_setup

! Initialize the region and data.

DEFINE SYMBOL data_initialization_script = feature_initialize_data_insitu

DEFINE SYMBOL fview = `UPCASE("($ferret_view)")`

! Define symbols associated with the region and data and perform any
! initialization needed for this dataset.

GO LAS_initialize_region 0
IF ($data_0_var"0|vid>1|*>0")  THEN
   DEFINE SYMBOL ferret_by_id = 1
   USE "($data_0_url)"
   LET varnames = ..varnames

   DEFINE SYMBOL data_0_var = `varnames[i=1]`
   CANCEL DATA "($data_0_url)"
ENDIF
DEFINE SYMBOL data_name_in = ($data_0_var)

GO LAS_initialize_data 0

! for this we do not need var_with_gaps
DEFINE SYMBOL data_var = ($data_0_var)  

DEFINE SYMBOL its_insitu = 1

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Here is variable 0 title
DEFINE SYMBOL ferret_title_0 = ($ferret_plot_title"($data_var)")
LET title_len = STRLEN("($ferret_title_0)")

! Set the URL label for the first dataset.
GO LAS_url_label 0

! For the annotations
IF `($ngood_data"-10|*>1") LT 0` THEN DEFINE SYMBOL ngood_data = `($data_var)[i=@NGD]`
IF `($nbad_data"-10|*>1") LT 0` THEN DEFINE SYMBOL nbad_data = `($data_var)[i=@NBD]`


let nstations = `($rowvar),return=msize`
let maxrow = `($rowvar)[m=@max]`

! Use Ferret properties to set up the plot qualifiers
IF `($ferret_palette"0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_palette = thirty_by_levels

IF `($ferret_fill_levels"0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_fill_levels = (0,`nstations+1`,1)
GO LAS_set_plot_qualifiers

! Open the window, apply size, scale options
GO LAS_open_window

! Set up variables

let t1 = time[i=@min]
let t2 = time[i=@max]
define axis/t=`t1,prec=15`:`t2,prec=15`/npoints=2000/units=seconds/t0="`time.time_origin`" taxis_all
let tt_all = t[gt=taxis_all]


let time2d = EXPNDI_BY_M_COUNTS (time, ($rowvar), maxrow)
let var2d = EXPNDI_BY_M_COUNTS (($data_var), ($rowvar), maxrow)

let id2dz = EXPNDI_ID_BY_Z_COUNTS( XSEQUENCE(($rowvar)), maxrow)
let id2d = RESHAPE(TRANSPOSE_XZ(id2dz), var2d)

set win/asp=0.5
ppl %range `($data_var)[i=@min]`, `($data_var)[i=@max]`,10

let delr = ($ppl$range_high) - ($ppl$range_low)
IF `(delr) LT ABS(0.01*($data_var)[i=@min])` THEN
   LET delr = 0.05* ABS(($data_var)[i=@min])
   ppl %range `($data_var)[i=@min] - delr`, `($data_var)[i=@max] + delr`,10
ENDIF
plot/nolab/vlim=($ppl$range_low):($ppl$range_high) t[gt=taxis_all] 

! Plot the lines.  For up to 8 lines, make separate labeled line plots
! otherwise make a cloud of colored lines, changing color with each line.
! Should have a UI choice between the two styles.

IF `nstations LE 8` THEN
   
   IF `nstations GT 1` THEN set win/asp=1

! Add another color, light gray, to make a line through the middle of each plot
   let ncolors = 7
   set mode linec:`ncolors`
   
   ppl color,7,85,85,85    ! lt gray
   
   ! Make the time series axis along the bottom
   
! This viewport will be used to draw the time axis at the bottom 
! and to label the z axes.
   
   def view/axes/xlim=0.1:0.9/ylim=0.002:0.98 tv
   set view tv
   
! Define variables for consistent vertical axes for all the time series

   plot/set ($ferret_plot_var)
   
   let plotmin = ($ppl$ymin1)
   let plotmax = ($ppl$ymax1)
   
   ppl %range `plotmin`, `plotmax`,4
   let plotinc = ($ppl$range_inc)
   
   
   LET delr = plotmax - plotmin
   IF `(delr) LT ABS(0.01*plotmin)` THEN
      LET delr = 0.05* ABS(plotmin)
      ppl %range `plotmin-delr`, `plotmax+delr`,4
      let plotmin = ($ppl$range_low) 
      let plotmax = ($ppl$range_high) 
   ENDIF
   
! Draw the time axis along the bottom of the page
   go margins 0.1,0.6
   plot/nolab/axes=0,1,0,0/vlim=`plotmin`:`plotmax` t[gt=taxis_all] 
   
! Define viewports for the time series plots
   let y2 = 0.98
   let del = 0.92/nstations
   let y1 = `y2 - del` + 0.02
   
   repeat/range=1:`nstations`/NAME=q (def view/axes/xlim=0.1:0.9/ylim=`y1`:`y2` vp_`q`; \
                             let y1 = `y1 - del`; let y2 = `y2 - del`)
   
! Set up to draw a gray horizontal line through the middle of each plot
   let t_all = t[gt=taxis_all]
   let tpts = {`t_all[L=@min]`, `t_all[L=@max]`}
   let ymid = ( `plotmax` + `plotmin`)/2
   let ypts = {`ymid`, `ymid`}
   
! Draw and label each timeseries. Define the time series from the
! time data in each individual feature, regrid to the overall time series
! so they will be positioned correctly.

   repeat/range=1:`nstations`/name=q (\
   define symbol q = `q`; \
   set view vp_($q);\
   define axis/t=`time2d[m=($q),i=@min],prec=15`:`time2d[m=($q),i=@max],prec=15`/\
   npoints=2000/units=seconds/t0="`time.time_origin`" taxis; \
   show axis taxis;\
   let tempx = var2d[m=($q)];\
   let tt = t[gt=taxis];\
   let vart = reshape(tempx, tt);\
   plot/color=red/axes=0,0,1,0/nolab/vlim=`plotmin`:`plotmax`:`plotinc` vart[gt=taxis_all]; \
   plot/over/vs/line/nolab/color=7 tpts,ypts;\
   plot/over/color=red/axes=0,0,1,0/nolab/vlim=`plotmin`:`plotmax`:`plotinc` vart[gt=taxis_all]; \
   label/nouser 0.1, `($ppl$ylen)*0.9`, -1,0,0.12 @AS`($feature_variable)[m=($q)]`)

ELSE  ! more than 8 stations

   repeat/range=1:`nstations`/name=q (\
   define symbol q = `q`; \
   define axis/t=`time2d[m=($q),i=@min],prec=15`:`time2d[m=($q),i=@max],prec=15`/\
   npoints=2000/units=seconds/t0="`time.time_origin`" taxis; \
   show axis taxis;\
   let tempx = var2d[m=($q)];\
   let colrx = id2d[m=($q)];\
   let tt = t[gt=taxis];\
   let vart = reshape(tempx, tt);\
   let colort = reshape(colrx, tt);\
   plot/over/line/nolab/thick=1/ribbon($qualifiers) vart,colort;\
   ppl shaset reset; list/L=1 colort)
   
ENDIF

! Add labels at the top for the location of overlaid lines
! and for URLs if they exist  

GO labels_above_plot

! Add timeseries information on the top
GO feature_labels  

! if constraints are shown via constraint_0_lhs etc, define labels for those
GO set_constraint_labels

! Save the results
! The script wants to get the time-axis end points.

DEFINE SYMBOL data_0_var = tt_all

DEFINE SYMBOL result_type = tline
GO LAS_results ($result_type)

! End of file ------------ Timeseries_station_plot.jnl--------------------------

