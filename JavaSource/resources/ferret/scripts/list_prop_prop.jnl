!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! list_prop_prop.jnl
! 
! Author: ansley
! Date: 08-2013

! lists prop_prop_plot.jnl creates an ascii listing of the data from a 
! property-property plot, using the data variable in symbol data_0_var,
! the second variable from data_1_var and optionally colored by data_2_var.

set mode ver:always

DEFINE SYMBOL frmt width=1024/norow
IF ($ferret_data_format"0|csv>1|tsv>1|asc>1|*>0") THEN 
   DEFINE SYMBOL frmt = ($frmt)/($ferret_data_format"|tsv>format=tab|csv>format=comma|asc>heading=enhanced")
ENDIF

SET LIST/FILE="($result_ferret_listing_filename)"
SET LIST/prec=6

! This may already have been set by e.g. Trajectory_correlation.jnl

IF `($data_count"0") LT 2` THEN
  MESSAGE/ERROR **ERROR Expecting two variables, but only received ($data_count)
  EXIT/PROGRAM
ENDIF

DEFINE SYMBOL its_prop_prop_plot = 1  ! used in setting titles and in RESULTS

! Define symbols associated with the region and data and perform any
! initialization needed for this dataset.

GO LAS_initialize_region 0
GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Here is variable 0 title 
DEFINE SYMBOL ferret_title_0 = ($ferret_plot_title"($data_var)")
DEFINE SYMBOL ferret_plot_var_0 = ($ferret_plot_var)

IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var_0 = ($ferret_plot_base_var)
IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var = ($ferret_plot_base_var)

LET/TITLE="($ferret_title_0)" xvar = XSEQUENCE(($ferret_plot_var_0))

! Initialize the second variable.
! In fact the region and dataset will be the
! same as for var 0 (for now anyway)

GO LAS_initialize_region 1
GO LAS_initialize_data 1

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Here is variable 1 title 
DEFINE SYMBOL ferret_title_1 = ($ferret_plot_title"($data_var)")

DEFINE SYMBOL ferret_plot_var_1 = ($ferret_plot_var)
IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var_1 = ($ferret_plot_base_var)
IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var = ($ferret_plot_base_var)

DEFINE SYMBOL ferret_plot_var_1 = ($ferret_plot_var)

IF `($data_count"0") GE 3` THEN ! color by 3rd variable

   ! Initialize the 3rd variable.
   ! In fact the region and dataset will be the
   ! same as for var 0 (for now anyway)
   
   GO LAS_initialize_region 2
   GO LAS_initialize_data 2
   
   IF ($error_status"0|*>1") THEN
     MESSAGE/ERROR **ERROR ($error_string)
     EXIT/PROGRAM
   ENDIF
   
   ! Here is variable 2 title 
   DEFINE SYMBOL ferret_title_2 = ($ferret_plot_title"($data_var)")

   DEFINE SYMBOL ferret_plot_var_2 = ($ferret_plot_var)
   IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var_2 = ($ferret_plot_base_var)
   IF ($do_curvi_xy"0|0|*>1") THEN DEFINE SYMBOL ferret_plot_var = ($ferret_plot_base_var)

   DEFINE SYMBOL ferret_plot_var_2 = ($ferret_plot_var)

   LET/TITLE="($ferret_title_2)" zvar = XSEQUENCE(($ferret_plot_var_2))

   DEFINE SYMBOL color_by = 1

ENDIF

IF `STRINDEX("($variable_lab%0%)", "vs") EQ 0` THEN \
   DEFINE SYMBOL variable_lab = ($variable_1_lab) vs ($variable_0_lab)

IF  ($color_by"0") THEN 
   IF `STRINDEX("($variable_lab%0%)", "colored") EQ 0` THEN \
      DEFINE SYMBOL variable_lab = ($variable_lab) colored by ($ferret_title_2)
ENDIF

LET/TITLE="($ferret_title_0)" xvar = XSEQUENCE(($ferret_plot_var_0))
LET/TITLE="($ferret_title_1)" yvar = XSEQUENCE(($ferret_plot_var_1))

DEFINE SYMBOL xvar = xvar
DEFINE SYMBOL yvar = yvar

! Apply any constraints
IF ($constraint_0_lhs"0|*>1) THEN
   GO apply_pp_constraints 0 xvar
   DEFINE SYMBOL xvar = var_constr_0
   GO apply_pp_constraints 1 yvar
   DEFINE SYMBOL yvar = var_constr_1
ENDIF

! The variables must be the same size. Check and set up a nice message if not.

LET xsize = `($xvar),RETURN=isize`
LET ysize = `($yvar),RETURN=isize`

IF `xsize NE ysize` THEN 
! Is this a DSG file? If so is one of the variables on the sample-dimension (obs) axis
! and the other on the trajectory (or profile) axis?  May need to expand a variable 
! onto the obs axis
         
	 sh dat/att
	 sh dat

  MESSAGE/ERROR **ERROR The variables must have the same dimensions: ($data_0_var), ($data_1_var)
  EXIT/PROGRAM
ENDIF


! Do we want the date string or the date coordinate?  List both.
IF `($ferret_timelab_res"0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_timelab_res = day

DEFINE SYMBOL t_units_string = `TIME.units`
LET nsince = `STRINDEX("($t_units_string)", "since")-1`
IF `nsince GT 0` THEN DEFINE SYMBOl tunits = `SUBSTRING("($t_units_string)", 1, nsince)`
   
DEFINE SYMBOL data_prop_var = ($data_0_var)
DEFINE SYMBOL ferret_prop_var = ($ferret_plot_var_0)
DEFINE SYMBOL ferret_plot_var = ($ferret_plot_var_1)
IF `STRINDEX( UPCASE("($data_0_var)"), "TIME") GT 0` THEN DEFINE SYMBOL tunits = ($data_0_units)
IF `STRINDEX( UPCASE("($data_1_var)"), "TIME") GT 0` THEN DEFINE SYMBOL tunits = ($data_1_units)

DEFINE SYMBOL plot_arg = ($xvar), ($yvar)

IF ($color_by"0|*>1") THEN 
   DEFINE SYMBOL plot_arg = ($xvar), ($yvar), zvar
   let zsize = `zvar,RETURN=isize`
   IF `zsize NE xsize` THEN

! Is this a DSG file? If so is one of the variables on the sample-dimension (obs) axis
! and the other on the trajectory (or profile) axis?  May need to expand a variable 
! onto the obs axis
      
      sh dat/att
      sh dat

      MESSAGE/ERROR **ERROR The variables must have the same dimensions: ($data_0_var), ($data_2_var)
      EXIT/PROGRAM
   ENDIF
   DEFINE SYMBOL color_by_title = `zvar,RETURN=title`

ENDIF  ! color-by 3rd var


IF `($color_by_title"0|*>1") AND ($ferret_annotations%0|*>1%) EQ 0` THEN \ 
 LABEL/NOUSER `($ppl$width)-($ppl$xorg)-0.2`, -0.7, 1, 0, 0.12 Colored by <NL>($color_by_title)

! set up any constraint labels
GO set_constraint_labels
pause

! Define a mask based on the constraints, to apply to list variables

LET output_mask = IF var_constr_0 AND var_constr_1 THEN 1+0*var_constr_0
LET size = `output_mask[i=@ngd]`

! Make a time axis from the time coordinates and use it to compute the date strings.
LET amin = time[i=@MIN]
LET amax = time[i=@MAX]
DEFINE SYMBOL is_time = 1
GO LAS_is_range amin amax
DEFINE AXIS/T=`ax_lo`:`ax_hi`:`del_ax`/T0="`TIME.time_origin`"/UNITS=($tunits) haxis

LET timesample = COMPRESSI(output_mask*time)
LET/TITLE="Time"/UNITS="`time,RETURN=units`" Times = timesample
LET/TITLE="Time String" Dates = TAX_DATESTRING (Times[i=1:`size`], t[gt=haxis], "($ferret_timelab_res%($tunits)%)")

LET nlist = 2
DEFINE SYMBOL vars_out = Dates, Times

! Define Longitude and Latitude variables at the masked locations

LET/TITLE="`longitude,RETURN=title`"/UNITS="`longitude,RETURN=units`"  Lon = COMPRESSI(output_mask*longitude)
LET/TITLE="`latitude,RETURN=title`"/UNITS="`latitude,RETURN=units`" Lat = COMPRESSI(output_mask*latitude)

LET nlist = `nlist + 2`
DEFINE SYMBOL vars_out = ($vars_out), Lon, Lat

! Define variables with titles

LET/TITLE="`($data_0_var),RETURN=title`"/UNITS="`($data_0_var),RETURN=units`" \
 ($data_0_var)_ = COMPRESSI(output_mask*var_constr_0)
LET/TITLE="`($data_1_var),RETURN=title`"/UNITS="`($data_1_var),RETURN=units`" \
 ($data_1_var)_ = COMPRESSI(output_mask*var_constr_1)

LET nlist = `nlist + 2`
DEFINE SYMBOL vars_out = ($vars_out), ($data_0_var)_, ($data_1_var)_

! color-by variable on the prop-prop plot:

IF ($data_2_var"0|*>1") THEN 
   LET/TITLE="`($data_2_var),RETURN=title`"/UNITS="`($data_12_var),RETURN=units`" \
    ($data_2_var)_ = COMPRESSI(output_mask*zvar)
   
   LET nlist = `nlist + 1`
   DEFINE SYMBOL vars_out = ($vars_out), ($data_2_var)_
ENDIF

LIST/NOHEAD/NOROW/FILE/CLOBBER/FORMAT=("Total Number of Records", F16.0) `size`

DEFINE SYMBOL list_quals = APPEND

! Constraint labels

REPEAT/RANGE=1:($note_num)/name=q (\
 DEFINE SYMBOL qq = `q`; \
 SAY/OUTFILE="($result_ferret_listing_filename)"/APPEND   ($note_($qq)_lab) )

can sym nothing 
SAY/OUTFILE="($result_ferret_listing_filename)"/APPEND       ($nothing)
SAY/OUTFILE="($result_ferret_listing_filename)"/APPEND       ($nothing)
SAY/OUTFILE="($result_ferret_listing_filename)"/APPEND       ($nothing)

! the default is set under 1/4 of Ferret's memory allowing for LET definitions 
LET use_size = 1000000*($ferret_memory)/4.
LET max_size = ($MAX_LIST_SIZE"`use_size`")


IF `size* nlist GT max_size` THEN
   IF `($ferret_memory"25.6") LT 300` THEN SET MEM/SIZ=300
   LET use_size = 1000000*($ferret_memory)/4.
ENDIF



IF `size* nlist LE max_size` THEN
! 
! ... list in one big chunk
!
   IF `($ferret_format"0|asc>1|*>0") + ($ferret_format"0|txt>1|*>0") GT 0` THEN  
      IF ($var_history"0|*>1") THEN LIST/($list_quals)/NOHEAD/FORMAT=(A) var_hist
      DEFINE SYMBOL list_quals = APPEND
   ENDIF

   LIST/i=1:`size`/($list_quals)/FILE/($frmt) ($vars_out)

ELSE
   LET nchunk = INT(size/ max_size)
   IF `nchunk LT 2` THEN LET nchunk = 2
   LET ichunk = INT(size/ nchunk) 
   LET i1 = 1
   LET i2 = `ichunk`
   REPEAT/RANGE=1:`nchunk+1` ( \
     LIST/($list_quals)/FILE/($frmt)/I=`i1`:`i2` ($vars_out); \
     CANC MEM/ALL; \
     DEFINE SYMBOL list_quals = APPEND/NOHEAD; \
     LET i1 = `i2+1`; \
     LET i2 = `i2+ichunk`; \
     IF `i1 GT size` THEN EXIT/LOOP; \
     IF `i2 GT size` then LET i2 = size)

ENDIF


! ----- End of list_prop_prop.jnl ------------------------------------------------

