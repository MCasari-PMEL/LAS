!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! list_a_variable.jnl
! 
! Author: ansley 
! Date: 2007/09/08 
!
! 22-Apr-2008 If there is a transformation, write a new attribute, transform_history
!             Previously tried to append to the existing history attribute but if that
!             contained special characters such as ; Ferret had parsing problems.
!             Also changes to output of transformed variables.
!
! Called by list_data.jnl Initialize and write a single variable, appending 
! it to the ascii or netCDF output file.
! Argument is the variable number, 0, 1, ...

! 10-Jul-2008 ACM The size of chunks was too small!

DEFINE SYMBOL var_num = $1

! Cannot list out a pseudo-variable, e.g. Z. In the initialization,
! check for pseutonames. If the variable name is a pseudo-var name, 
! write out name_1 e.g. Z_1 with all the same attributes.

DEFINE SYMBOL check_for_pseudonames = 1

GO LAS_initialize_region ($var_num)
GO LAS_initialize_data ($var_num)

! Here is the variable we will list out, with the region specified.
IF `($ferret_list_var"0|*>1") NE 1` THEN DEFINE SYMBOL ferret_list_var = ($ferret_plot_var)

IF ($ferret_format%|txt>1|*>0) THEN
  DEFINE SYMBOL frmt ($frmt)/width=1024
ENDIF

! NOTE: TO ACHIEVE LISTINGS IN EXCESS OF FERRET MEM SIZE THIS SCRIPT REQUIRES
! THAT THE DATA SIZE CAN BE OBTAINED WITHOUT FULL EVALUATION OF THE RESULT.
! THIS WILL NOT BE THE CASE IF
!     o AN AXIS OF THE "LET" DEFINITION OF THE VAR TO BE LISTED CONTAINS
!           POTENTIAL DATA DEPENDENCIES (E.G. A GRID-CHANGING
!           FUNCTION THAT RETURNS AN ABSTRACT OR NEW AXIS SUCH AS FFTA() )


! First, see if the data is coming from a curvilinear dataset.
! xy view is written as curvilinear coordinates plus a variable.
!
! Other slices have either been regridded to a rectilinear grid 
! if the Curv_to_Rect_Regridding constraint was selected, or sampled
! from the curvilinear coordinates. In either of these cases, we just
! write out the data on a rectlinear grid.

LET its_curvi = `( ($ferret_curvi_coord_lat"0|*>1) + STRINDEX("($ferret_view)", "xy") ) GT 1`
! If user requested regridding to rectilinear grid, then proceed 
! as for non-curvilinear data

IF ($constraint_($var_num)_lhs"0|Curv_to_Rect_Regridding>1|*>0") THEN LET its_curvi = 0

IF `its_curvi` THEN
   GO list_curvi_data.jnl
   EXIT/SCRIPT
ENDIF

! Write all global attributes that came in from the input dataset 
! TODO: When we get to listing comparisions, will need to decide what to
!       do, list global attrs of both files?

IF `($ferret_version) GT 6.19` THEN
IF `STRINDEX( "($result_ferret_listing_type)", "netcdf" ) NE 0` THEN
   DEFINE ATT/OUTPUT ..FERRET_comment = "File written via LAS. Attributes are inherited from originating dataset"
   SET ATT/OUTPUT=all .
ENDIF
ENDIF

! Set up a history attribute for the variable, and a text variable with
! the same information for ascii and text output.

SET DATA/SAVE
SET DATA ($data_num)
LET attlist = ($data_var_nq).attnames

sh sym ferret_list_var

LET/UNITS="`($ferret_list_var),RETURN=units)`"\
  the_list_var = ($ferret_list_var)
!SET ATT/LIKE=($data_var) the_list_var

IF ($data_var_transform"0|*>1") THEN 
    DEFINE attribute ($ferret_list_var).transform_history  "($data_var)($data_var_transform)"
    SET ATTRIBUTE/OUTPUT ($ferret_list_var).transform_history
    DEFINE SYMBOL var_history ($ferret_list_var)($data_var_transform)
    LET var_hist = "($var_history)"
    SET VAR/TITLE="($ferret_list_var)($data_var_transform)" ($ferret_list_var)
    IF ($data_dup_varname"0|*>1") THEN

        LET ($data_dup_varname) = ($ferret_list_var)
!        DEFINE SYMBOL data_dup_varname =  ($data_var)  ! the limits min,max,chunk determine the range
        SET VAR/TITLE="($data_title)($data_var_transform)" ($data_dup_varname)
        SET VAR/UNITS="($data_units)" ($data_dup_varname)

       DEFINE attribute ($data_dup_varname).transform_history  "($data_var)($data_var_transform)"
       SET ATTRIBUTE/OUTPUT ($data_dup_varname).transform_history
    ENDIF

ENDIF
SET DATA/RESTORE

SET data ($data_num)

! For requests that encompass 360 deg of longitude Ferret returns N points if
! the range boundaries lie exactly on grid cell boundaries and N+1 points 
! otherwise.  Folks requesting data downloads don't want to have their their
! first data point (sometimes) repeated so we test for that here and switch 
! to index space.

IF ($region_x"0|*>1") THEN
   IF `($region_y_range"0|0|*>1") GT 0` THEN
      LET the_coords = x[gx=($data_var),($region_x)]
      DEFINE SYMBOL user_istart `the_coords,RETURN=istart`
      DEFINE SYMBOL user_iend `the_coords,RETURN=iend`
      CANCEL REGION/X
      DEFINE SYMBOL data_isize `the_coords,RETURN=isize`
      IF `($user_iend) - ($user_istart) + 1 - ($data_isize) GT 0` THEN
         DEFINE SYMBOL new_iend `($user_iend) - 1`
      ELSE 
         DEFINE SYMBOL new_iend `($user_iend)`
      ENDIF
      SET REGION/I=($user_istart):($new_iend)

! Now get the start, stop and size information

     DEFINE SYMBOL imin `the_coords,RETURN=istart`
     DEFINE SYMBOL iend `the_coords,RETURN=iend`
     DEFINE SYMBOL isize `the_coords,RETURN=isize`

   ELSE  ! range is 0
      DEFINE SYMBOL imin 1
      DEFINE SYMBOL imax 1
      DEFINE SYMBOL isize 1
   ENDIF 

ENDIF  ! region_x

! Now get the start, stop and size information for other dimensions.

IF ($region_y"0|*>1") THEN
   IF `($region_y_range"0|0|*>1") GT 0` THEN
      LET the_coords = y[gy=($data_var),($region_y)]
      DEFINE SYMBOL jmin `the_coords,RETURN=jstart`
      DEFINE SYMBOL jmax `the_coords,RETURN=jend`
      DEFINE SYMBOL jsize `the_coords,RETURN=jsize`
   ELSE  ! range is 0
      DEFINE SYMBOL jmin 1
      DEFINE SYMBOL jmax 1
      DEFINE SYMBOL jsize 1
   ENDIF 
ENDIF  ! region_y

IF ($region_z"0|*>1") THEN
   IF `($region_z_range"0|0|*>1") GT 0` THEN
      LET the_coords = z[gz=($data_var),($region_z)]
      DEFINE SYMBOL kmin `the_coords,RETURN=kstart`
      DEFINE SYMBOL kmax `the_coords,RETURN=kend`
      DEFINE SYMBOL ksize `the_coords,RETURN=ksize`
   ELSE  ! range is 0
      DEFINE SYMBOL kmin 1
      DEFINE SYMBOL kmax 1 
      DEFINE SYMBOL ksize 1
   ENDIF
ENDIF  ! region_z

IF ($region_t"0|*>1") THEN
      LET the_coords = t[gt=($data_var),($region_t)]
      DEFINE SYMBOL lmin `the_coords,RETURN=lstart`
      DEFINE SYMBOL lmax `the_coords,RETURN=lend`
      DEFINE SYMBOL lsize `the_coords,RETURN=lsize`
ENDIF  ! region_t

! RETURN=*start returns 0 IF the axis is an undefined axis
! This messes messes up the repeat loop below IF the data is chunked.
! A few more lines of code to handle this.

!  Modulo x axis may have negative indices.
! IF `($imin"0") lt 1` THEN DEFINE SYMBOL imin 1
! IF `($imax"0") lt 1` THEN DEFINE SYMBOL imax 1
IF `($isize"0") lt 1` THEN DEFINE SYMBOL isize 1
IF `($jmin"0") lt 1` THEN DEFINE SYMBOL jmin 1
IF `($jmax"0") lt 1` THEN DEFINE SYMBOL jmax 1
IF `($jsize"0") lt 1` THEN DEFINE SYMBOL jsize 1
IF `($kmin"0") lt 1` THEN DEFINE SYMBOL kmin 1
IF `($kmax"0") lt 1` THEN DEFINE SYMBOL kmax 1
IF `($ksize"0") lt 1` THEN DEFINE SYMBOL ksize 1
IF `($lmin"0") lt 1` THEN DEFINE SYMBOL lmin 1
IF `($lmax"0") lt 1` THEN DEFINE SYMBOL lmax 1
IF `($lsize"0") lt 1` THEN DEFINE SYMBOL lsize 1
CANCEL REGION/X

! the default is set under 1/4 of Ferret's memory allowing for LET definitions 
LET use_size = 1000000*($ferret_memory)/4.
LET max_size = ($MAX_LIST_SIZE"`use_size`")  ! use this for debugging, too

! Size of the data variable 
LET size = ($isize)*($jsize)*($ksize)*($lsize)

! default chunk sizes
LET jchunk = ($jsize) ! dflt size = full span
LET kchunk = ($ksize)
LET lchunk = INT(max_size/size * ($lsize))

! IF mode interpolate is desired
IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN SET MODE INTERPOLATE 

! Write all the attributtes on the file and coordinate variables.

! Set up to output all the input attributes. If there are attributes 
! slab_minor slab_max on the input variable (which would have come 
! from a Ferret subset written with the enhanced header)then writing
! those to a file causes a netCDF err: Coordinates out of Domain. 
! So do not write those.

!SET ATT/OUTPUT=all ($data_var)

LET allatts = ($data_var_nq).attnames
LET natts = ($data_var_nq).nattrs
 REPEAT/RANGE=1:`natts`/NAME=m (LET attname = allatts[I=`m`]; \
    LET is_slab = STRINDEX("`attname`", "slab_min") + STRINDEX("`attname`", "slab_max"); \
    IF `is_slab EQ 0` THEN SET ATT/OUTPUT ($data_var_nq).`attname`)

! Set up to write all attributes for the coordinate variables. 

! DEFINE SYMBOL out_xax = `the_list_var,RETURN=xaxis`
! DEFINE SYMBOL out_yax = `the_list_var,RETURN=yaxis`
! DEFINE SYMBOL out_zax = `the_list_var,RETURN=zaxis`
! DEFINE SYMBOL out_tax = `the_list_var,RETURN=taxis`
! IF `STRCMP("($out_xax)", "NORMAL") NE 0 AND \
!   STRCMP("($out_xax)", "ABSTRACT") NE 0` THEN SET ATT/OUTPUT=all (($out_xax))
! IF `STRCMP("($out_yax)", "NORMAL") NE 0 AND  \
!   STRCMP("($out_yax)", "ABSTRACT") NE 0` THEN SET ATT/OUTPUT=all (($out_yax))
! IF `STRCMP("($out_zax)", "NORMAL") NE 0 AND  \
!   STRCMP("($out_zax)", "ABSTRACT") NE 0` THEN SET ATT/OUTPUT=all (($out_zax))
! IF `STRCMP("($out_tax)", "NORMAL") NE 0 AND  \
!   STRCMP("($out_tax)", "ABSTRACT") NE 0` THEN SET ATT/OUTPUT=all (($out_tax))

IF `size LE max_size` THEN

   ! ... list in one big chunk
   !     This special case is not strictly necessary -- the logic for listing
   !     large files also works for small ... but with some overhead

   ! IF a duplicate variable name is assigned for netcdf listings, change the name before listing 

   IF `($data_dup_varname%0|*>1%) GT 0` THEN

      LET ($data_dup_varname) = ($ferret_list_var)
      SET VAR/UNITS="($data_units)" ($data_dup_varname)
      SET VAR/TITLE="($data_title)" ($data_dup_varname)
      !SET ATT/OUTPUT=all ($data_dup_varname)

      IF `($ferret_format"0|asc>1|*>0") + ($ferret_format"0|txt>1|*>0") GT 0` THEN
         IF ($var_history"0|*>1") THEN LIST/APPEND/NOHEAD/FORMAT=(A)/FILE="($result_ferret_listing_filename)" var_hist
      ENDIF

      LIST/APPEND/FILE/($frmt) ($data_dup_varname)

   ELSE

      IF `($ferret_format"0|asc>1|*>0") + ($ferret_format"0|txt>1|*>0") GT 0` THEN  
         IF ($var_history"0|*>1") THEN LIST/APPEND/NOHEAD/FORMAT=(A)/FILE="($result_ferret_listing_filename)" var_hist
      ENDIF

!      LET/TITLE="($data_title)($data_var_transform)"/d=($data_num)\
!       /units="`($ferret_list_var),RETURN=units`"\
!       /BAD=`($ferret_list_var),RETURN=bad` f_plot_var = ($ferret_list_var)
!      LIST/APPEND/FILE/($frmt) f_plot_var

      LIST/APPEND/FILE/($frmt) ($ferret_list_var)

   ENDIF

ELSE
   DEF REGION/DEFAULT SAVE
   CAN REGION

   ! determine how to break the listing into small chunks
   ! chunk along L axis. IF still too big THEN along K axis, too. IF still ...
   IF `lchunk EQ 0` THEN
     LET lchunk = 1
     LET kchunk =  INT(max_size/(size/($lsize)) * ($ksize))
     IF `kchunk EQ 0` THEN
       LET kchunk = 1
       LET jchunk =  INT(max_size/(size/(($lsize)*($ksize))) * ($jsize) )
       IF `jchunk EQ 0` THEN
         LET jchunk = 1
         ! always list a full span in I ... possibly exceeding max_size
       ENDIF
     ENDIF
   ENDIF
   LET jtop = MIN(j+jchunk-1, ($jmax) )
   LET ktop = MIN(k+kchunk-1, ($kmax) )
   LET ltop = MIN(l+lchunk-1, ($lmax) )

   IF ($ferret_format"0|cdf>1|*>0") THEN
     ! IF a duplicate variable name is assigned for netcdf listings, change the name before listing
     
      IF `($data_dup_varname%0|*>1%) GT 0` THEN
        LET ($data_dup_varname) = ($ferret_list_var)
!        DEFINE SYMBOL data_dup_varname =  ($data_var)  ! the limits min,max,chunk determine the range
        SET VAR/TITLE="($data_title)($data_var_transform)" ($data_dup_varname)
        SET VAR/UNITS="($data_units)" ($data_dup_varname)

        IF ($ferret_list_var_no_zt"0|*>1") THEN
           LET ($data_dup_varname) = ($ferret_list_var_no_zt)
           DEFINE SYMBOL ferret_list_var = ($data_dup_varname)
           SET VAR/TITLE="($data_title)($data_var_transform)" ($data_dup_varname)
           SET VAR/UNITS="($data_units)" ($data_dup_varname)
           
           DEFINE attribute ($data_dup_varname).transform_history  "($data_var)($data_var_transform)"
           SET ATTRIBUTE/OUTPUT ($data_dup_varname).transform_history

           REPEAT/L=($lmin):($lmax):`lchunk` REPEAT/K=($kmin):($kmax):`kchunk`  (LIST/APPEND/FILE/($frmt)/K=`k`:`ktop`/L=`l`:`ltop`/KLIMITS=($kmin):($kmax)/LLIMITS=($lmin):($lmax) ($ferret_list_var); CANC MEM/ALL)

        ELSE
     ! ... netCDF output in chunks
           REPEAT/L=($lmin):($lmax):`lchunk` REPEAT/K=($kmin):($kmax):`kchunk` REPEAT/J=($jmin):($jmax):`jchunk` (LIST/APPEND/FILE/($frmt)/J=`j`:`jtop`/K=`k`:`ktop`/L=`l`:`ltop`/JLIMITS=($jmin):($jmax)/KLIMITS=($kmin):($kmax)/LLIMITS=($lmin):($lmax) ($data_dup_varname); CANC MEM/ALL)
        ENDIF
     ELSE
     ! ... netCDF output in chunks
        REPEAT/L=($lmin):($lmax):`lchunk` REPEAT/K=($kmin):($kmax):`kchunk` REPEAT/J=($jmin):($jmax):`jchunk` (LIST/APPEND/FILE/($frmt)/J=`j`:`jtop`/K=`k`:`ktop`/L=`l`:`ltop`/JLIMITS=($jmin):($jmax)/KLIMITS=($kmin):($kmax)/LLIMITS=($lmin):($lmax) ($ferret_x_var); CANC MEM/ALL)
     ENDIF

   ELSE

   ! ... ASCII output
   ! ... Note that large ASCII output as-is is highly imperfect because header
   !     information gets embedded into the data
   !     Proper solution of this problem requires us to know which is the #2
   !     axis of the output (e.g. in an XYZT output the Y axis is #2 by dflt)
   !     and forbid chunking along either axis of this plane -- 

     IF ($var_history"0|*>1") THEN LIST/APPEND/NOHEAD/FILE="($result_ferret_listing_filename)" var_hist

     REPEAT/L=($lmin):($lmax):`lchunk` REPEAT/K=($kmin):($kmax):`kchunk` REPEAT/J=($jmin):($jmax):`jchunk` (LIST/APPEND/FILE/($frmt)/J=`j`:`jtop`/K=`k`:`ktop`/L=`l`:`ltop` ($ferret_x_var); CANC MEM/ALL)
   ENDIF
   SET REGION save

ENDIF

! End of script ---------- list_a_variable.jnl----------------------------
