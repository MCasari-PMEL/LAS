! LAS_auto_levels.jnl
! ACM 8/22/2007

! acm 9/11/07 If its a descriptor file Ferret wont allow striding. 
!             check for that case and just set num levels.

! Based on a variables value over its entire range, set strides
! if needed to quickly get stats on the variable. Use this to set levels.

! Argument: the variable to use in setting the levels.

! The symbol ferret_center_levels, if set to 1, forces the levels
! to be 2 std above and below zero. Otherwise use 2 std above 
! and below the data mean

! This script should be done BEFORE any other striding is done.
! It operates on the variable on its entire native unstrided grid.

! input_fill_levels and input_contour_levels are symbols that are defined in 
! LAS_initialize_variable.jnl, telling whether settings for levels were
! made 

! Determine striding for speed in operating the STAT command
LET memsize = 0.5* 1.e6

! Make sure its a 2D plot operation.

DEFINE SYMBOL op = `UPCASE("($operation_ID)")`

IF `STRLEN("($ferret_view)") NE 2` THEN EXIT/SCRIPT
IF `STRINDEX("($op)", "PLOT") EQ 0 AND STRINDEX("($op)", "ANIMATION") EQ 0` THEN EXIT/SCRIPT

IF `STRINDEX("($op)", "VECTOR") GT 0` THEN EXIT/SCRIPT

! If its a compare plot, and if the ($ferret_diff_var) is not yet defined, 
! just return.

IF `($ferret_diff_var"1|*>0") AND STRINDEX("($op)", "COMPARE_PLOT") NE 0` THEN EXIT/SCRIPT

! If levels were requested but not centered ones, just return.
IF ($input_fill_levels"0") THEN
   DEFINE SYMBOL up_fill_levels = `UPCASE("($ferret_fill_levels)")`
   LET nc = `STRINDEX("($up_fill_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc EQ 0` THEN
      IF `($ferret_contour_levels"0|*>1") EQ 0` THEN \
        DEFINE SYMBOL ferret_contour_levels ($ferret_fill_levels)
     
      EXIT/SCRIPT
   ENDIF
 ENDIF

! See if centered levels were requested, either by setting the symbol ferret_center_levels
! or with a contour_levels or fill_levels that is centered.

! If contour levels requested with levels of nC, e.g. 20C, then get the value to
! set num_fine_levels in the %RANGE command below

! If levels were requested but not centered ones, just return.

IF ($ferret_contour_levels"0|*>1") THEN 
   DEFINE SYMBOL up_contour_levels = `UPCASE("($ferret_contour_levels)")`
   LET nc = `STRINDEX("($up_contour_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc GT 0` THEN 
      LET slen = STRLEN ("($up_fill_levels)") 
      IF `slen GT 1` THEN DEFINE SYMBOL num_fine_levels = `SUBSTRING ("($up_fill_levels)", 1, slen-1)`
   ENDIF
ENDIF
IF ($ferret_fill_levels"0|*>1") THEN 
   DEFINE SYMBOL up_fill_levels = `UPCASE("($ferret_fill_levels)")`
   LET nc = `STRINDEX("($up_fill_levels)", "C")`
   DEFINE SYMBOL ferret_center_levels = `nc GT 0`
   IF `nc GT 0` THEN 
      LET slen = STRLEN ("($up_fill_levels)") 
      IF `slen GT 1` THEN DEFINE SYMBOL num_fine_levels = `SUBSTRING ("($up_fill_levels)", 1, slen-1)`
   ENDIF
ENDIF

! Apply to the variable over the entire grid, applying z region if given.
LET pvar = ($data_var)[d=($data_num)]

! cannot do native striding if this is a descriptor dataset. In that case
! just set the number of levels

DEFINE SYMBOL check_for_des =  `pvar,return=dsetpath`
IF `STRINDEX("($check_for_des)", ".des") GT 0` THEN
   IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_fill_levels = ($num_fine_levels"30")
   IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_contour_levels = ($num_fine_levels"30")
   EXIT/SCRIPT
ENDIF

LET zsiz = `pvar,return=ksize`
IF `zsiz GT 1` THEN LET pvar = ($data_var)[d=($data_num),($region_z)]


! If the ferret_diff_var has been defined, use it.
! When no levels are defined, use centered ones.
IF ($ferret_diff_var"0|*>1") THEN 
   IF `($input_contour_levels"0|0|1") EQ 0` THEN 
      CANCEL SYMBOL ferret_contour_levels
      DEFINE SYMBOL ferret_contour_levels = 20c
   ENDIF
   IF `($input_fill_levels"0|0|1") EQ 0` THEN 
      CANCEL SYMBOL ferret_fill_levels
      DEFINE SYMBOL ferret_fill_levels = 20c
   ENDIF
   LET pvar = ($ferret_diff_var)
ENDIF

LET var_size = ABS( `pvar,RETURN=size`)
DEFINE SYMBOL var_dim = `pvar,RETURN=shape`
LET ndims = STRLEN("($var_dim)")

LET stride_for_speed = `INT( 1+ ((var_size/memsize))/ndims )`

! If axes are not already strided, apply simple striding which
! we will undo later.
IF `stride_for_speed GT 1` THEN

!   IF `(($region_x_range"0|*>1") GT 0) AND (($xstride"0|*>1") EQ 0)` THEN
   IF `($xstride"0|*>1") EQ 0` THEN
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=xaxis`
     DEFINE SYMBOL undo_x = 1
   ENDIF

!   IF `(($region_y_range"0|*>1") GT 0) AND (($ystride"0|*>1") EQ 0)` THEN 
   IF `($ystride"0|*>1") EQ 0` THEN 
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=yaxis`
     DEFINE SYMBOL undo_y = 1
   ENDIF

!   IF `(($region_t_range"0|*>1") GT 0) AND (($tstride"0|*>1") EQ 0)` THEN 
   IF `($tstride"0|*>1") EQ 0` THEN 
     SET AXIS/STRIDE=`stride_for_speed` `pvar,RETURN=taxis`
     DEFINE SYMBOL undo_t = 1
   ENDIF

ENDIF

! If already strided, do index strides.

IF ($xstride"0|*>1") THEN 
   LET xsize  `pvar,RETURN=isize`
   IF `xsize GT 50` THEN \
     DEFINE SYMBOL index_strides = i=1:`xsize`:`INT(xsize/10)`
ENDIF

IF ($ystride"0|*>1") THEN 
   LET ysize  `pvar,RETURN=jsize`
   IF `xsize GT 50` THEN 
     IF ($index_strides"0|*>1") THEN 
        DEFINE SYMBOL index_strides = ($index_strides),j=1:`ysize`:`INT(ysize/10)`
     ELSE
        DEFINE SYMBOL index_strides = j=1:`ysize`:`INT(ysize/10)`
     ENDIF
   ENDIF
ENDIF

IF ($tstride"0|*>1") THEN 
   LET tsize  `pvar,RETURN=lsize`
   IF `tsize GT 50` THEN 
     IF ($index_strides"0|*>1") THEN 
        DEFINE SYMBOL index_strides = ($index_strides),L=1:`tsize`:`INT(tsize/10)`
     ELSE
        DEFINE SYMBOL  index_strides = L=1:`tsize`:`INT(tsize/10)`
     ENDIF
   ENDIF
ENDIF

IF ($index_strides"0|*>1") THEN 
   DEFINE SYMBOL ppvar = pvar[($index_strides)]
   IF ($region_zt"0|*>1") THEN DEFINE SYMBOL ppvar = pvar[($index_strides),($region_z)]
ELSE
   DEFINE SYMBOL ppvar = pvar
   IF ($region_z"0|*>1") THEN DEFINE SYMBOL ppvar = pvar[($region_z)]
ENDIF

! Execute the stat command to load symbols with the variables
! mean, max, min, std.

STAT ($ppvar)

! Undo the striding. Other striding may be set elsewhere

IF `stride_for_speed GT 1` THEN
   IF `($undo_x"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=xaxis`
   IF `($undo_y"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=yaxis`
   IF `($undo_z"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=zaxis`
   IF `($undo_t"0") GT 0` THEN CANCEL AXIS/STRIDE `pvar,RETURN=taxis`
ENDIF

IF `($stat_ngood"0") EQ 0` THEN EXIT_SCRIPT

! Compute rounded-off levels with the PPL %RANGE command.

! IF ($ferret_center_levels"0|1|TRUE>1|*>0") THEN
!    PPL %RANGE `-2*($stat_std)`, `+2*($stat_std)`, ($ferret_num_contour_levels"50")
! ELSE
!    PPL %RANGE `($stat_mean)-2*($stat_std)`, `($stat_mean)+2*($stat_std)`, 50
! ENDIF
! 
! DEFINE SYMBOL ferret_auto_levels_simple = (-inf)(($ppl$range_low),($ppl$range_high),($ppl$range_inc))(inf) 
! 
!!!  Suggestions from Hankin
! Determine contour levels to use such that a fine density of levels is used within +/- 1 std dev
! and a coarse density is used out to +/- 2 std dev.
! The ratio of densities is density_factor = fine/coarse.

LET density_factor = 4
! fraction_that_are_fine = density_factor/(1+density_factor)

! This can happen if the data is a constant value...
IF `($stat_min) EQ ($stat_max)` THEN EXIT/SCRIPT

DEFINE SYMBOL num_fine_levels = `(density_factor/(1+density_factor)) * ($num_contour_levels"50")`
DEFINE SYMBOL num_coarse_levels =  `($num_contour_levels"50") - ($num_fine_levels)`
DEFINE SYMBOL half_num_coarse_levels = `($num_coarse_levels)/2`

! Compute rounded-off levels with the PPL %RANGE command.

LET nstd = 2*($stat_std)

IF ($stat_mean"bad>1|bad>1|*>0") THEN 
  DEFINE SYMBOL error_string "The ($data_var)[d=($data_num)] variable has no valid data"
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF
IF ($ferret_center_levels"0|1|TRUE>1|*>0") THEN
   LET centered_max = MAX(ABS(`($stat_mean)-nstd`), ABS(`($stat_mean)+nstd`) )
   PPL %RANGE `-1*centered_max`, `centered_max`, ($num_fine_levels)
ELSE
   PPL %RANGE `($stat_mean)-nstd`, `($stat_mean)+nstd`, ($num_fine_levels)
ENDIF

DEFINE SYMBOL fine_lo = ($ppl$range_low)
DEFINE SYMBOL fine_hi = ($ppl$range_high)
DEFINE SYMBOL fine_inc = ($ppl$range_inc)

DEFINE SYMBOL coarse_delta = `($fine_inc)*density_factor`
DEFINE SYMBOL coarse_lo = `($fine_lo) - ($half_num_coarse_levels) * ($coarse_delta)`
DEFINE SYMBOL coarse_hi = `($fine_hi) + ($half_num_coarse_levels) * ($coarse_delta)`

IF `( ($stat_min) GE ($coarse_lo) ) OR ( ($stat_max) LE ($coarse_hi)) ` THEN
   PPL %RANGE `($stat_min)`, `($stat_max)`, 2*($num_coarse_levels)
   DEFINE SYMBOL lowest_lev = ($ppl$range_low)
   DEFINE SYMBOL highest_lev = ($ppl$range_high)
ENDIF

IF `($stat_min) LT ($coarse_lo)` THEN
   DEFINE SYMBOL ferret_auto_levels = (-inf)(($coarse_lo),($fine_lo),($coarse_delta))(($fine_lo),($fine_hi),($fine_inc))
   DEFINE SYMBOL ferret_auto_lines = (-inf)(($coarse_lo),($fine_lo),`2*($coarse_delta)`)(($fine_lo),($fine_hi),`2*($fine_inc)`)

ELSE
   DEFINE SYMBOL ferret_auto_levels = (($lowest_lev),($fine_lo),($coarse_delta))(($fine_lo),($fine_hi),($fine_inc))
   DEFINE SYMBOL ferret_auto_lines = (($lowest_lev),($fine_lo),`2*($coarse_delta)`)(($fine_lo),($fine_hi),`2*($fine_inc)`)

ENDIF

IF `($stat_max) GT ($coarse_hi)` THEN
   DEFINE SYMBOL ferret_auto_levels = ($ferret_auto_levels)(($fine_hi),($coarse_hi),($coarse_delta))(inf)
   DEFINE SYMBOL ferret_auto_lines = ($ferret_auto_lines)(($fine_hi),($coarse_hi),`2*($coarse_delta)`)(inf)

ELSE
   DEFINE SYMBOL ferret_auto_levels = ($ferret_auto_levels)(($fine_hi),($highest_lev),($coarse_delta))
   DEFINE SYMBOL ferret_auto_lines = ($ferret_auto_lines)(($fine_hi),($highest_lev),`2*($coarse_delta)`)
ENDIF

! Use these levels to reset ferret_contour_levels and ferret_fill_levels 

IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_fill_levels = ($ferret_auto_levels)
IF `($input_contour_levels"0|0|1") EQ 0` THEN \
   DEFINE SYMBOL ferret_contour_levels = ($ferret_auto_lines)

pause
