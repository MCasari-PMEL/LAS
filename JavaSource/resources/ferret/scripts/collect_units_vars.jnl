! Build up plot_vars_n symbols, with sets of variables
! that have common units.

! Argument
!   1 = Collect the unique units strings, and a list of which 
!       variables has each units string.
!   2 = 

LET n_ustrings = 0
DEFINE SYMBOL inunits_0 = `UPCASE("($units_0)")`
DEFINE SYMBOL group_label_0 = ($units_0)

DEFINE SYMBOL has_0 = 0
DEFINE SYMBOL var_grp0 = 0;\
DEFINE SYMBOL plot_vars_0 = ($ferret_plot_var_0)
LET num_found = 1
LET nunique = 1

! which variables match the units ($units_0)

DEFINE SYMBOL unique_0 = ($inunits_0)

REPEAT/RANGE=2:($data_count)/name=c (\
   DEFINE SYMBOL c = `c`;\
   DEFINE SYMBOL cm = `c-1`;\
   DEFINE SYMBOL in_units = ($units_($cm));\
   DEFINE SYMBOL inunits_up `UPCASE("($in_units)")`;\
   IF `STRCMP("($inunits_up)", "($unique_0)") EQ 0` THEN ;\
     DEFINE SYMBOL has_0 = ($has_0), ($cm);\
     DEFINE SYMBOL var_grp($cm) = 0;\
     DEFINE SYMBOL plot_vars_0 =  ($plot_vars_0), ($ferret_plot_var_($cm));\
     LET num_found = `num_found + 1`;\
   ENDIF)


IF `num_found LT ($data_count)` THEN 
   
! Find the next unique units string, inunits_1 and which variables 
! match the units inunits_1, etc.

let strings_unique_0 = {"($unique_0)"}

   REPEAT/RANGE=0:($data_count)/name=c (\
   DEFINE SYMBOL c = `c`;\
   GO collect_units_vars_sub ($c);\
   IF ($no_more_unique"0|*>1) THEN EXIT/LOOP;\
   IF `num_found GE ($data_count)` THEN EXIT/LOOP)

ENDIF  ! Find further unique units

DEFINE SYMBOL nunit_grp = `nunique`
LET strings_unique = strings_unique_`($nunit_grp)-1`

!  ----------------- End of collect_units_vars.jnl ------------------------------------
