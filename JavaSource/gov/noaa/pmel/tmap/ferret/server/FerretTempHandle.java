package gov.noaa.pmel.tmap.ferret.server;

import java.io.*;
import java.util.*;

import org.iges.anagram.*;

/** Implementation of the TempDataHandle interface for Ferret datasets. <p>
 *  This class object is used to hold information of temporary data generated by
 * Ferret analysis task. <p>
 *
 * @author Richard Roger, Yonghua Wei
 * @see org.iges.anagram.TempDataHandle 
 */
public class FerretTempHandle
    implements TempDataHandle {

    /** Construct a {@link FerretTempHandle} object 
     * @param name a short name for the temporary dataset
     * @param info a {@link FerretDataInfo} object that holds metadata information 
     *             for this temporary dataset
     * @param dependencies a set of datasets this temporary dataset depends on
     * @throws AnagramException if anything goes wrong
     */

    public FerretTempHandle(String name, 
			   FerretDataInfo info,
			   Set dependencies) 
	throws AnagramException {

	createTime = System.currentTimeMillis();

	this.dataHandles = new DataHandle[] {
	    new DataHandle(name, info.getTitle(), info, createTime),
	};
	this.dependencies = dependencies;
    }


    public Set getDependencies() {
	return dependencies;
    }

    /**Returns an array of data handles corresponding to this temporay dataset
     */
    public DataHandle[] getDataHandles() {
	return dataHandles;
    }

    /** Returns the total size of files used
     */
    public long getStorageSize() {
        long returnVal = 0;
        FerretDataInfo info = (FerretDataInfo)dataHandles[0].getToolInfo();
        String srcName = info.getSourceFile();
        File cacheFile = new File(srcName);
        if(cacheFile.exists()) {
            returnVal += cacheFile.length();
        }
          
        return returnVal;
    }

    /** Returns the creation time of this temporay data handle
     */
    public long getCreateTime() {
	return createTime;
    }

    public void deleteStorage() {

	for (int i = 0; i < dataHandles.length; i++) {
	    dataHandles[i].setAvailable(false);
	}

        FerretDataInfo info = (FerretDataInfo)dataHandles[0].getToolInfo();
        Store store = Server.getServer().getStore();
        synchronized(dataHandles[0]) {
            store.deleteFile(info.getSourceFile());
        }
    }

    /** Deletes the specified file
     *  @param fileName the name of the file to delete
     */
    protected void deleteFile(String fileName) {
       if(fileName!=null) {
          File file = new File(fileName);
          if(file.exists()) {
             file.delete();
          }
       }
    }

    /**A set of data handle names upon which were used to generate this temporary data. 
     * The catalog module uses this to check if a result is made out-of-date by the modification of another dataset.
     */
    protected Set dependencies;

    /** An array of data handles corresponding to this temporay dataset
     */
    protected DataHandle[] dataHandles;

    /** The creation time of the temporary dataset handle
     */
    protected long createTime;

}
